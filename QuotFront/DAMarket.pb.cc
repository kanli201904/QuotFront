// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DAMarket.proto

#include "DAMarket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace DAMarket {
constexpr Market_Head::Market_Head(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(PROTOBUF_ULONGLONG(0))
  , type_(0)

  , exchange_(0)

  , instrument_(0u)
  , sequence_(0u)
  , latency_(0u)
  , source_(0u)
  , bitmap_(0u)
  , length_(0u){}
struct Market_HeadDefaultTypeInternal {
  constexpr Market_HeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Market_HeadDefaultTypeInternal() {}
  union {
    Market_Head _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Market_HeadDefaultTypeInternal _Market_Head_default_instance_;
constexpr Market_PriceData::Market_PriceData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(0)
  , volume_(0u){}
struct Market_PriceDataDefaultTypeInternal {
  constexpr Market_PriceDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Market_PriceDataDefaultTypeInternal() {}
  union {
    Market_PriceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Market_PriceDataDefaultTypeInternal _Market_PriceData_default_instance_;
constexpr Market_Data::Market_Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_price_(0)
  , volume_(PROTOBUF_ULONGLONG(0))
  , turnover_(PROTOBUF_ULONGLONG(0))
  , current_volume_(0u)
  , buy_1_volume_(0u)
  , buy_1_price_(0)
  , sell_1_price_(0)
  , max_price_(0)
  , min_price_(0)
  , open_price_(0)
  , close_price_(0)
  , high_limit_(0)
  , low_limit_(0)
  , sell_1_volume_(0u)
  , market_status_(0)

  , open_interest_(PROTOBUF_ULONGLONG(0))
  , settle_price_(0)
  , pre_close_(0)
  , pre_settle_(0)
  , preo_price_(0)
  , post_price_(0){}
struct Market_DataDefaultTypeInternal {
  constexpr Market_DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Market_DataDefaultTypeInternal() {}
  union {
    Market_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Market_DataDefaultTypeInternal _Market_Data_default_instance_;
constexpr Market_Depth::Market_Depth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bids_()
  , asks_(){}
struct Market_DepthDefaultTypeInternal {
  constexpr Market_DepthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Market_DepthDefaultTypeInternal() {}
  union {
    Market_Depth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Market_DepthDefaultTypeInternal _Market_Depth_default_instance_;
constexpr Market_Deal::Market_Deal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deal_price_(0)
  , timestamp_(PROTOBUF_ULONGLONG(0))
  , deal_volume_(0u){}
struct Market_DealDefaultTypeInternal {
  constexpr Market_DealDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Market_DealDefaultTypeInternal() {}
  union {
    Market_Deal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Market_DealDefaultTypeInternal _Market_Deal_default_instance_;
constexpr Market_HeartBeat::Market_HeartBeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(PROTOBUF_ULONGLONG(0)){}
struct Market_HeartBeatDefaultTypeInternal {
  constexpr Market_HeartBeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Market_HeartBeatDefaultTypeInternal() {}
  union {
    Market_HeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Market_HeartBeatDefaultTypeInternal _Market_HeartBeat_default_instance_;
constexpr Market::Market(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(nullptr)
  , data_(nullptr)
  , depth_(nullptr)
  , deal_(nullptr)
  , heartbeat_(nullptr){}
struct MarketDefaultTypeInternal {
  constexpr MarketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarketDefaultTypeInternal() {}
  union {
    Market _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarketDefaultTypeInternal _Market_default_instance_;
}  // namespace DAMarket
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DAMarket_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DAMarket_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DAMarket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DAMarket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, timestamp_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, type_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, exchange_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, instrument_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, sequence_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, latency_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, source_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, bitmap_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Head, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_PriceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_PriceData, price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_PriceData, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, current_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, current_volume_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, volume_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, turnover_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, buy_1_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, sell_1_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, buy_1_volume_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, sell_1_volume_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, max_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, min_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, open_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, close_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, high_limit_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, low_limit_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, open_interest_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, settle_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, pre_close_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, pre_settle_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, preo_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, post_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Data, market_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Depth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Depth, bids_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Depth, asks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Deal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Deal, deal_price_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Deal, deal_volume_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_Deal, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market_HeartBeat, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market, head_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market, data_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market, depth_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market, deal_),
  PROTOBUF_FIELD_OFFSET(::DAMarket::Market, heartbeat_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DAMarket::Market_Head)},
  { 14, -1, sizeof(::DAMarket::Market_PriceData)},
  { 21, -1, sizeof(::DAMarket::Market_Data)},
  { 47, -1, sizeof(::DAMarket::Market_Depth)},
  { 54, -1, sizeof(::DAMarket::Market_Deal)},
  { 62, -1, sizeof(::DAMarket::Market_HeartBeat)},
  { 68, -1, sizeof(::DAMarket::Market)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DAMarket::_Market_Head_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DAMarket::_Market_PriceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DAMarket::_Market_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DAMarket::_Market_Depth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DAMarket::_Market_Deal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DAMarket::_Market_HeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DAMarket::_Market_default_instance_),
};

const char descriptor_table_protodef_DAMarket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016DAMarket.proto\022\010DAMarket\"\232\013\n\006Market\022#\n"
  "\004head\030\001 \001(\0132\025.DAMarket.Market.Head\022#\n\004da"
  "ta\030\002 \001(\0132\025.DAMarket.Market.Data\022%\n\005depth"
  "\030\003 \001(\0132\026.DAMarket.Market.Depth\022#\n\004deal\030\004"
  " \001(\0132\025.DAMarket.Market.Deal\022-\n\theartbeat"
  "\030\005 \001(\0132\032.DAMarket.Market.HeartBeat\032\327\001\n\004H"
  "ead\022\021\n\ttimestamp\030\001 \001(\004\022&\n\004type\030\002 \001(\0162\030.D"
  "AMarket.Market.MsgType\022-\n\010exchange\030\003 \001(\016"
  "2\033.DAMarket.Market.ExchangeID\022\022\n\ninstrum"
  "ent\030\004 \001(\r\022\020\n\010sequence\030\005 \001(\r\022\017\n\007latency\030\006"
  " \001(\r\022\016\n\006source\030\007 \001(\r\022\016\n\006bitmap\030\010 \001(\r\022\016\n\006"
  "length\030\t \001(\r\032*\n\tPriceData\022\r\n\005price\030\001 \001(\001"
  "\022\016\n\006volume\030\007 \001(\r\032\327\003\n\004Data\022\025\n\rcurrent_pri"
  "ce\030\001 \001(\001\022\026\n\016current_volume\030\002 \001(\r\022\016\n\006volu"
  "me\030\003 \001(\004\022\020\n\010turnover\030\004 \001(\004\022\023\n\013buy_1_pric"
  "e\030\005 \001(\001\022\024\n\014sell_1_price\030\006 \001(\001\022\024\n\014buy_1_v"
  "olume\030\007 \001(\r\022\025\n\rsell_1_volume\030\010 \001(\r\022\021\n\tma"
  "x_price\030\t \001(\001\022\021\n\tmin_price\030\n \001(\001\022\022\n\nopen"
  "_price\030\013 \001(\001\022\023\n\013close_price\030\014 \001(\001\022\022\n\nhig"
  "h_limit\030\r \001(\001\022\021\n\tlow_limit\030\016 \001(\001\022\025\n\ropen"
  "_interest\030\017 \001(\004\022\024\n\014settle_price\030\020 \001(\001\022\021\n"
  "\tpre_close\030\021 \001(\001\022\022\n\npre_settle\030\022 \001(\001\022\022\n\n"
  "preo_price\030\023 \001(\001\022\022\n\npost_price\030\024 \001(\001\0224\n\r"
  "market_status\030\025 \001(\0162\035.DAMarket.Market.Ma"
  "rketStatus\032[\n\005Depth\022(\n\004Bids\030\001 \003(\0132\032.DAMa"
  "rket.Market.PriceData\022(\n\004Asks\030\002 \003(\0132\032.DA"
  "Market.Market.PriceData\032B\n\004Deal\022\022\n\ndeal_"
  "price\030\001 \001(\001\022\023\n\013deal_volume\030\002 \001(\r\022\021\n\ttime"
  "stamp\030\003 \001(\004\032\036\n\tHeartBeat\022\021\n\ttimestamp\030\001 "
  "\001(\004\"7\n\007MsgType\022\016\n\nHEART_BEAT\020\000\022\r\n\tREAL_D"
  "ATA\020\001\022\r\n\tDEAL_DATA\020\002\"\256\001\n\nExchangeID\022\013\n\007E"
  "X_NONE\020\000\022\013\n\007EX_HKEX\020\001\022\n\n\006EX_SGX\020\002\022\013\n\007EX_"
  "NASD\020\003\022\013\n\007EX_NYEX\020\004\022\n\n\006EX_CME\020\005\022\t\n\005EX_SH"
  "\020\006\022\t\n\005EX_SZ\020\007\022\013\n\007EX_SHFE\020\010\022\014\n\010EX_CFFEX\020\t"
  "\022\n\n\006EX_DCE\020\n\022\013\n\007EX_CZCE\020\013\022\n\n\006EX_INE\020\014\"@\n"
  "\014MarketStatus\022\017\n\013NOT_TRADING\020\000\022\010\n\004PREO\020\001"
  "\022\013\n\007TRADING\020\002\022\010\n\004POST\020\003B\003\370\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DAMarket_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DAMarket_2eproto = {
  false, false, 1476, descriptor_table_protodef_DAMarket_2eproto, "DAMarket.proto", 
  &descriptor_table_DAMarket_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_DAMarket_2eproto::offsets,
  file_level_metadata_DAMarket_2eproto, file_level_enum_descriptors_DAMarket_2eproto, file_level_service_descriptors_DAMarket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_DAMarket_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DAMarket_2eproto);
  return descriptor_table_DAMarket_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DAMarket_2eproto(&descriptor_table_DAMarket_2eproto);
namespace DAMarket {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DAMarket_2eproto);
  return file_level_enum_descriptors_DAMarket_2eproto[0];
}
bool Market_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Market_MsgType Market::HEART_BEAT;
constexpr Market_MsgType Market::REAL_DATA;
constexpr Market_MsgType Market::DEAL_DATA;
constexpr Market_MsgType Market::MsgType_MIN;
constexpr Market_MsgType Market::MsgType_MAX;
constexpr int Market::MsgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_ExchangeID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DAMarket_2eproto);
  return file_level_enum_descriptors_DAMarket_2eproto[1];
}
bool Market_ExchangeID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Market_ExchangeID Market::EX_NONE;
constexpr Market_ExchangeID Market::EX_HKEX;
constexpr Market_ExchangeID Market::EX_SGX;
constexpr Market_ExchangeID Market::EX_NASD;
constexpr Market_ExchangeID Market::EX_NYEX;
constexpr Market_ExchangeID Market::EX_CME;
constexpr Market_ExchangeID Market::EX_SH;
constexpr Market_ExchangeID Market::EX_SZ;
constexpr Market_ExchangeID Market::EX_SHFE;
constexpr Market_ExchangeID Market::EX_CFFEX;
constexpr Market_ExchangeID Market::EX_DCE;
constexpr Market_ExchangeID Market::EX_CZCE;
constexpr Market_ExchangeID Market::EX_INE;
constexpr Market_ExchangeID Market::ExchangeID_MIN;
constexpr Market_ExchangeID Market::ExchangeID_MAX;
constexpr int Market::ExchangeID_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_MarketStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DAMarket_2eproto);
  return file_level_enum_descriptors_DAMarket_2eproto[2];
}
bool Market_MarketStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Market_MarketStatus Market::NOT_TRADING;
constexpr Market_MarketStatus Market::PREO;
constexpr Market_MarketStatus Market::TRADING;
constexpr Market_MarketStatus Market::POST;
constexpr Market_MarketStatus Market::MarketStatus_MIN;
constexpr Market_MarketStatus Market::MarketStatus_MAX;
constexpr int Market::MarketStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Market_Head::_Internal {
 public:
};

Market_Head::Market_Head(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DAMarket.Market.Head)
}
Market_Head::Market_Head(const Market_Head& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:DAMarket.Market.Head)
}

void Market_Head::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(length_));
}

Market_Head::~Market_Head() {
  // @@protoc_insertion_point(destructor:DAMarket.Market.Head)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market_Head::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Market_Head::ArenaDtor(void* object) {
  Market_Head* _this = reinterpret_cast< Market_Head* >(object);
  (void)_this;
}
void Market_Head::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market_Head::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Market_Head::Clear() {
// @@protoc_insertion_point(message_clear_start:DAMarket.Market.Head)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market_Head::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DAMarket.Market.MsgType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::DAMarket::Market_MsgType>(val));
        } else goto handle_unusual;
        continue;
      // .DAMarket.Market.ExchangeID exchange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchange(static_cast<::DAMarket::Market_ExchangeID>(val));
        } else goto handle_unusual;
        continue;
      // uint32 instrument = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          instrument_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 latency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bitmap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market_Head::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAMarket.Market.Head)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .DAMarket.Market.MsgType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .DAMarket.Market.ExchangeID exchange = 3;
  if (this->exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_exchange(), target);
  }

  // uint32 instrument = 4;
  if (this->instrument() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_instrument(), target);
  }

  // uint32 sequence = 5;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sequence(), target);
  }

  // uint32 latency = 6;
  if (this->latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_latency(), target);
  }

  // uint32 source = 7;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_source(), target);
  }

  // uint32 bitmap = 8;
  if (this->bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bitmap(), target);
  }

  // uint32 length = 9;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAMarket.Market.Head)
  return target;
}

size_t Market_Head::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAMarket.Market.Head)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // .DAMarket.Market.MsgType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .DAMarket.Market.ExchangeID exchange = 3;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_exchange());
  }

  // uint32 instrument = 4;
  if (this->instrument() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_instrument());
  }

  // uint32 sequence = 5;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  // uint32 latency = 6;
  if (this->latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latency());
  }

  // uint32 source = 7;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_source());
  }

  // uint32 bitmap = 8;
  if (this->bitmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bitmap());
  }

  // uint32 length = 9;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market_Head::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAMarket.Market.Head)
  GOOGLE_DCHECK_NE(&from, this);
  const Market_Head* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market_Head>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAMarket.Market.Head)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAMarket.Market.Head)
    MergeFrom(*source);
  }
}

void Market_Head::MergeFrom(const Market_Head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAMarket.Market.Head)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.exchange() != 0) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (from.instrument() != 0) {
    _internal_set_instrument(from._internal_instrument());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.latency() != 0) {
    _internal_set_latency(from._internal_latency());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.bitmap() != 0) {
    _internal_set_bitmap(from._internal_bitmap());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void Market_Head::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAMarket.Market.Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market_Head::CopyFrom(const Market_Head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAMarket.Market.Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market_Head::IsInitialized() const {
  return true;
}

void Market_Head::InternalSwap(Market_Head* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Market_Head, length_)
      + sizeof(Market_Head::length_)
      - PROTOBUF_FIELD_OFFSET(Market_Head, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Market_Head::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Market_PriceData::_Internal {
 public:
};

Market_PriceData::Market_PriceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DAMarket.Market.PriceData)
}
Market_PriceData::Market_PriceData(const Market_PriceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:DAMarket.Market.PriceData)
}

void Market_PriceData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

Market_PriceData::~Market_PriceData() {
  // @@protoc_insertion_point(destructor:DAMarket.Market.PriceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market_PriceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Market_PriceData::ArenaDtor(void* object) {
  Market_PriceData* _this = reinterpret_cast< Market_PriceData* >(object);
  (void)_this;
}
void Market_PriceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market_PriceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Market_PriceData::Clear() {
// @@protoc_insertion_point(message_clear_start:DAMarket.Market.PriceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market_PriceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market_PriceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAMarket.Market.PriceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // uint32 volume = 7;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAMarket.Market.PriceData)
  return target;
}

size_t Market_PriceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAMarket.Market.PriceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market_PriceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAMarket.Market.PriceData)
  GOOGLE_DCHECK_NE(&from, this);
  const Market_PriceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market_PriceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAMarket.Market.PriceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAMarket.Market.PriceData)
    MergeFrom(*source);
  }
}

void Market_PriceData::MergeFrom(const Market_PriceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAMarket.Market.PriceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
}

void Market_PriceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAMarket.Market.PriceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market_PriceData::CopyFrom(const Market_PriceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAMarket.Market.PriceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market_PriceData::IsInitialized() const {
  return true;
}

void Market_PriceData::InternalSwap(Market_PriceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Market_PriceData, volume_)
      + sizeof(Market_PriceData::volume_)
      - PROTOBUF_FIELD_OFFSET(Market_PriceData, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Market_PriceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Market_Data::_Internal {
 public:
};

Market_Data::Market_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DAMarket.Market.Data)
}
Market_Data::Market_Data(const Market_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_price_, &from.current_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&post_price_) -
    reinterpret_cast<char*>(&current_price_)) + sizeof(post_price_));
  // @@protoc_insertion_point(copy_constructor:DAMarket.Market.Data)
}

void Market_Data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&post_price_) -
    reinterpret_cast<char*>(&current_price_)) + sizeof(post_price_));
}

Market_Data::~Market_Data() {
  // @@protoc_insertion_point(destructor:DAMarket.Market.Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Market_Data::ArenaDtor(void* object) {
  Market_Data* _this = reinterpret_cast< Market_Data* >(object);
  (void)_this;
}
void Market_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Market_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:DAMarket.Market.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_price_) -
      reinterpret_cast<char*>(&current_price_)) + sizeof(post_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double current_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          current_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 current_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 turnover = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double buy_1_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          buy_1_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sell_1_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          sell_1_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 buy_1_volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          buy_1_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sell_1_volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          sell_1_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double max_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          max_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          min_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double open_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          open_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double high_limit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          high_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double low_limit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          low_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 open_interest = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double settle_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          settle_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_close = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          pre_close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          pre_settle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double preo_price = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          preo_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double post_price = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          post_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .DAMarket.Market.MarketStatus market_status = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_market_status(static_cast<::DAMarket::Market_MarketStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAMarket.Market.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double current_price = 1;
  if (!(this->current_price() <= 0 && this->current_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_current_price(), target);
  }

  // uint32 current_volume = 2;
  if (this->current_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_current_volume(), target);
  }

  // uint64 volume = 3;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_volume(), target);
  }

  // uint64 turnover = 4;
  if (this->turnover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_turnover(), target);
  }

  // double buy_1_price = 5;
  if (!(this->buy_1_price() <= 0 && this->buy_1_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_buy_1_price(), target);
  }

  // double sell_1_price = 6;
  if (!(this->sell_1_price() <= 0 && this->sell_1_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_sell_1_price(), target);
  }

  // uint32 buy_1_volume = 7;
  if (this->buy_1_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_buy_1_volume(), target);
  }

  // uint32 sell_1_volume = 8;
  if (this->sell_1_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_sell_1_volume(), target);
  }

  // double max_price = 9;
  if (!(this->max_price() <= 0 && this->max_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_max_price(), target);
  }

  // double min_price = 10;
  if (!(this->min_price() <= 0 && this->min_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_min_price(), target);
  }

  // double open_price = 11;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_open_price(), target);
  }

  // double close_price = 12;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_close_price(), target);
  }

  // double high_limit = 13;
  if (!(this->high_limit() <= 0 && this->high_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_high_limit(), target);
  }

  // double low_limit = 14;
  if (!(this->low_limit() <= 0 && this->low_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_low_limit(), target);
  }

  // uint64 open_interest = 15;
  if (this->open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_open_interest(), target);
  }

  // double settle_price = 16;
  if (!(this->settle_price() <= 0 && this->settle_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_settle_price(), target);
  }

  // double pre_close = 17;
  if (!(this->pre_close() <= 0 && this->pre_close() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_pre_close(), target);
  }

  // double pre_settle = 18;
  if (!(this->pre_settle() <= 0 && this->pre_settle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_pre_settle(), target);
  }

  // double preo_price = 19;
  if (!(this->preo_price() <= 0 && this->preo_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_preo_price(), target);
  }

  // double post_price = 20;
  if (!(this->post_price() <= 0 && this->post_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_post_price(), target);
  }

  // .DAMarket.Market.MarketStatus market_status = 21;
  if (this->market_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_market_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAMarket.Market.Data)
  return target;
}

size_t Market_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAMarket.Market.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double current_price = 1;
  if (!(this->current_price() <= 0 && this->current_price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 volume = 3;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // uint64 turnover = 4;
  if (this->turnover() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_turnover());
  }

  // uint32 current_volume = 2;
  if (this->current_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_volume());
  }

  // uint32 buy_1_volume = 7;
  if (this->buy_1_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buy_1_volume());
  }

  // double buy_1_price = 5;
  if (!(this->buy_1_price() <= 0 && this->buy_1_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double sell_1_price = 6;
  if (!(this->sell_1_price() <= 0 && this->sell_1_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_price = 9;
  if (!(this->max_price() <= 0 && this->max_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_price = 10;
  if (!(this->min_price() <= 0 && this->min_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double open_price = 11;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_price = 12;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double high_limit = 13;
  if (!(this->high_limit() <= 0 && this->high_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // double low_limit = 14;
  if (!(this->low_limit() <= 0 && this->low_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 sell_1_volume = 8;
  if (this->sell_1_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sell_1_volume());
  }

  // .DAMarket.Market.MarketStatus market_status = 21;
  if (this->market_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_market_status());
  }

  // uint64 open_interest = 15;
  if (this->open_interest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open_interest());
  }

  // double settle_price = 16;
  if (!(this->settle_price() <= 0 && this->settle_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_close = 17;
  if (!(this->pre_close() <= 0 && this->pre_close() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_settle = 18;
  if (!(this->pre_settle() <= 0 && this->pre_settle() >= 0)) {
    total_size += 2 + 8;
  }

  // double preo_price = 19;
  if (!(this->preo_price() <= 0 && this->preo_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double post_price = 20;
  if (!(this->post_price() <= 0 && this->post_price() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAMarket.Market.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Market_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAMarket.Market.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAMarket.Market.Data)
    MergeFrom(*source);
  }
}

void Market_Data::MergeFrom(const Market_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAMarket.Market.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.current_price() <= 0 && from.current_price() >= 0)) {
    _internal_set_current_price(from._internal_current_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.turnover() != 0) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (from.current_volume() != 0) {
    _internal_set_current_volume(from._internal_current_volume());
  }
  if (from.buy_1_volume() != 0) {
    _internal_set_buy_1_volume(from._internal_buy_1_volume());
  }
  if (!(from.buy_1_price() <= 0 && from.buy_1_price() >= 0)) {
    _internal_set_buy_1_price(from._internal_buy_1_price());
  }
  if (!(from.sell_1_price() <= 0 && from.sell_1_price() >= 0)) {
    _internal_set_sell_1_price(from._internal_sell_1_price());
  }
  if (!(from.max_price() <= 0 && from.max_price() >= 0)) {
    _internal_set_max_price(from._internal_max_price());
  }
  if (!(from.min_price() <= 0 && from.min_price() >= 0)) {
    _internal_set_min_price(from._internal_min_price());
  }
  if (!(from.open_price() <= 0 && from.open_price() >= 0)) {
    _internal_set_open_price(from._internal_open_price());
  }
  if (!(from.close_price() <= 0 && from.close_price() >= 0)) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (!(from.high_limit() <= 0 && from.high_limit() >= 0)) {
    _internal_set_high_limit(from._internal_high_limit());
  }
  if (!(from.low_limit() <= 0 && from.low_limit() >= 0)) {
    _internal_set_low_limit(from._internal_low_limit());
  }
  if (from.sell_1_volume() != 0) {
    _internal_set_sell_1_volume(from._internal_sell_1_volume());
  }
  if (from.market_status() != 0) {
    _internal_set_market_status(from._internal_market_status());
  }
  if (from.open_interest() != 0) {
    _internal_set_open_interest(from._internal_open_interest());
  }
  if (!(from.settle_price() <= 0 && from.settle_price() >= 0)) {
    _internal_set_settle_price(from._internal_settle_price());
  }
  if (!(from.pre_close() <= 0 && from.pre_close() >= 0)) {
    _internal_set_pre_close(from._internal_pre_close());
  }
  if (!(from.pre_settle() <= 0 && from.pre_settle() >= 0)) {
    _internal_set_pre_settle(from._internal_pre_settle());
  }
  if (!(from.preo_price() <= 0 && from.preo_price() >= 0)) {
    _internal_set_preo_price(from._internal_preo_price());
  }
  if (!(from.post_price() <= 0 && from.post_price() >= 0)) {
    _internal_set_post_price(from._internal_post_price());
  }
}

void Market_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAMarket.Market.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market_Data::CopyFrom(const Market_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAMarket.Market.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market_Data::IsInitialized() const {
  return true;
}

void Market_Data::InternalSwap(Market_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Market_Data, post_price_)
      + sizeof(Market_Data::post_price_)
      - PROTOBUF_FIELD_OFFSET(Market_Data, current_price_)>(
          reinterpret_cast<char*>(&current_price_),
          reinterpret_cast<char*>(&other->current_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Market_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Market_Depth::_Internal {
 public:
};

Market_Depth::Market_Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bids_(arena),
  asks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DAMarket.Market.Depth)
}
Market_Depth::Market_Depth(const Market_Depth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bids_(from.bids_),
      asks_(from.asks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DAMarket.Market.Depth)
}

void Market_Depth::SharedCtor() {
}

Market_Depth::~Market_Depth() {
  // @@protoc_insertion_point(destructor:DAMarket.Market.Depth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market_Depth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Market_Depth::ArenaDtor(void* object) {
  Market_Depth* _this = reinterpret_cast< Market_Depth* >(object);
  (void)_this;
}
void Market_Depth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market_Depth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Market_Depth::Clear() {
// @@protoc_insertion_point(message_clear_start:DAMarket.Market.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bids_.Clear();
  asks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market_Depth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DAMarket.Market.PriceData Bids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DAMarket.Market.PriceData Asks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market_Depth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAMarket.Market.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DAMarket.Market.PriceData Bids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bids(i), target, stream);
  }

  // repeated .DAMarket.Market.PriceData Asks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_asks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAMarket.Market.Depth)
  return target;
}

size_t Market_Depth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAMarket.Market.Depth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DAMarket.Market.PriceData Bids = 1;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DAMarket.Market.PriceData Asks = 2;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->asks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market_Depth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAMarket.Market.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  const Market_Depth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market_Depth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAMarket.Market.Depth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAMarket.Market.Depth)
    MergeFrom(*source);
  }
}

void Market_Depth::MergeFrom(const Market_Depth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAMarket.Market.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bids_.MergeFrom(from.bids_);
  asks_.MergeFrom(from.asks_);
}

void Market_Depth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAMarket.Market.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market_Depth::CopyFrom(const Market_Depth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAMarket.Market.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market_Depth::IsInitialized() const {
  return true;
}

void Market_Depth::InternalSwap(Market_Depth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bids_.InternalSwap(&other->bids_);
  asks_.InternalSwap(&other->asks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Market_Depth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Market_Deal::_Internal {
 public:
};

Market_Deal::Market_Deal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DAMarket.Market.Deal)
}
Market_Deal::Market_Deal(const Market_Deal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&deal_price_, &from.deal_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&deal_volume_) -
    reinterpret_cast<char*>(&deal_price_)) + sizeof(deal_volume_));
  // @@protoc_insertion_point(copy_constructor:DAMarket.Market.Deal)
}

void Market_Deal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deal_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deal_volume_) -
    reinterpret_cast<char*>(&deal_price_)) + sizeof(deal_volume_));
}

Market_Deal::~Market_Deal() {
  // @@protoc_insertion_point(destructor:DAMarket.Market.Deal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market_Deal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Market_Deal::ArenaDtor(void* object) {
  Market_Deal* _this = reinterpret_cast< Market_Deal* >(object);
  (void)_this;
}
void Market_Deal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market_Deal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Market_Deal::Clear() {
// @@protoc_insertion_point(message_clear_start:DAMarket.Market.Deal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&deal_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deal_volume_) -
      reinterpret_cast<char*>(&deal_price_)) + sizeof(deal_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market_Deal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double deal_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          deal_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 deal_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deal_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market_Deal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAMarket.Market.Deal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double deal_price = 1;
  if (!(this->deal_price() <= 0 && this->deal_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_deal_price(), target);
  }

  // uint32 deal_volume = 2;
  if (this->deal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deal_volume(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAMarket.Market.Deal)
  return target;
}

size_t Market_Deal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAMarket.Market.Deal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double deal_price = 1;
  if (!(this->deal_price() <= 0 && this->deal_price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 deal_volume = 2;
  if (this->deal_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deal_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market_Deal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAMarket.Market.Deal)
  GOOGLE_DCHECK_NE(&from, this);
  const Market_Deal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market_Deal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAMarket.Market.Deal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAMarket.Market.Deal)
    MergeFrom(*source);
  }
}

void Market_Deal::MergeFrom(const Market_Deal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAMarket.Market.Deal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.deal_price() <= 0 && from.deal_price() >= 0)) {
    _internal_set_deal_price(from._internal_deal_price());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.deal_volume() != 0) {
    _internal_set_deal_volume(from._internal_deal_volume());
  }
}

void Market_Deal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAMarket.Market.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market_Deal::CopyFrom(const Market_Deal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAMarket.Market.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market_Deal::IsInitialized() const {
  return true;
}

void Market_Deal::InternalSwap(Market_Deal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Market_Deal, deal_volume_)
      + sizeof(Market_Deal::deal_volume_)
      - PROTOBUF_FIELD_OFFSET(Market_Deal, deal_price_)>(
          reinterpret_cast<char*>(&deal_price_),
          reinterpret_cast<char*>(&other->deal_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Market_Deal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Market_HeartBeat::_Internal {
 public:
};

Market_HeartBeat::Market_HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DAMarket.Market.HeartBeat)
}
Market_HeartBeat::Market_HeartBeat(const Market_HeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:DAMarket.Market.HeartBeat)
}

void Market_HeartBeat::SharedCtor() {
timestamp_ = PROTOBUF_ULONGLONG(0);
}

Market_HeartBeat::~Market_HeartBeat() {
  // @@protoc_insertion_point(destructor:DAMarket.Market.HeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market_HeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Market_HeartBeat::ArenaDtor(void* object) {
  Market_HeartBeat* _this = reinterpret_cast< Market_HeartBeat* >(object);
  (void)_this;
}
void Market_HeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market_HeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Market_HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:DAMarket.Market.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market_HeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market_HeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAMarket.Market.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAMarket.Market.HeartBeat)
  return target;
}

size_t Market_HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAMarket.Market.HeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market_HeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAMarket.Market.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Market_HeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market_HeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAMarket.Market.HeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAMarket.Market.HeartBeat)
    MergeFrom(*source);
  }
}

void Market_HeartBeat::MergeFrom(const Market_HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAMarket.Market.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Market_HeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAMarket.Market.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market_HeartBeat::CopyFrom(const Market_HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAMarket.Market.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market_HeartBeat::IsInitialized() const {
  return true;
}

void Market_HeartBeat::InternalSwap(Market_HeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Market_HeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Market::_Internal {
 public:
  static const ::DAMarket::Market_Head& head(const Market* msg);
  static const ::DAMarket::Market_Data& data(const Market* msg);
  static const ::DAMarket::Market_Depth& depth(const Market* msg);
  static const ::DAMarket::Market_Deal& deal(const Market* msg);
  static const ::DAMarket::Market_HeartBeat& heartbeat(const Market* msg);
};

const ::DAMarket::Market_Head&
Market::_Internal::head(const Market* msg) {
  return *msg->head_;
}
const ::DAMarket::Market_Data&
Market::_Internal::data(const Market* msg) {
  return *msg->data_;
}
const ::DAMarket::Market_Depth&
Market::_Internal::depth(const Market* msg) {
  return *msg->depth_;
}
const ::DAMarket::Market_Deal&
Market::_Internal::deal(const Market* msg) {
  return *msg->deal_;
}
const ::DAMarket::Market_HeartBeat&
Market::_Internal::heartbeat(const Market* msg) {
  return *msg->heartbeat_;
}
Market::Market(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DAMarket.Market)
}
Market::Market(const Market& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::DAMarket::Market_Head(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DAMarket::Market_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_depth()) {
    depth_ = new ::DAMarket::Market_Depth(*from.depth_);
  } else {
    depth_ = nullptr;
  }
  if (from._internal_has_deal()) {
    deal_ = new ::DAMarket::Market_Deal(*from.deal_);
  } else {
    deal_ = nullptr;
  }
  if (from._internal_has_heartbeat()) {
    heartbeat_ = new ::DAMarket::Market_HeartBeat(*from.heartbeat_);
  } else {
    heartbeat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DAMarket.Market)
}

void Market::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_) -
    reinterpret_cast<char*>(&head_)) + sizeof(heartbeat_));
}

Market::~Market() {
  // @@protoc_insertion_point(destructor:DAMarket.Market)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Market::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete depth_;
  if (this != internal_default_instance()) delete deal_;
  if (this != internal_default_instance()) delete heartbeat_;
}

void Market::ArenaDtor(void* object) {
  Market* _this = reinterpret_cast< Market* >(object);
  (void)_this;
}
void Market::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Market::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Market::Clear() {
// @@protoc_insertion_point(message_clear_start:DAMarket.Market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArena() == nullptr && depth_ != nullptr) {
    delete depth_;
  }
  depth_ = nullptr;
  if (GetArena() == nullptr && deal_ != nullptr) {
    delete deal_;
  }
  deal_ = nullptr;
  if (GetArena() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Market::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DAMarket.Market.Head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DAMarket.Market.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DAMarket.Market.Depth depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DAMarket.Market.Deal deal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DAMarket.Market.HeartBeat heartbeat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Market::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DAMarket.Market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DAMarket.Market.Head head = 1;
  if (this->has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  // .DAMarket.Market.Data data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .DAMarket.Market.Depth depth = 3;
  if (this->has_depth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::depth(this), target, stream);
  }

  // .DAMarket.Market.Deal deal = 4;
  if (this->has_deal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::deal(this), target, stream);
  }

  // .DAMarket.Market.HeartBeat heartbeat = 5;
  if (this->has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::heartbeat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DAMarket.Market)
  return target;
}

size_t Market::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAMarket.Market)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DAMarket.Market.Head head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .DAMarket.Market.Data data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .DAMarket.Market.Depth depth = 3;
  if (this->has_depth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_);
  }

  // .DAMarket.Market.Deal deal = 4;
  if (this->has_deal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deal_);
  }

  // .DAMarket.Market.HeartBeat heartbeat = 5;
  if (this->has_heartbeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartbeat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Market::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAMarket.Market)
  GOOGLE_DCHECK_NE(&from, this);
  const Market* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Market>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAMarket.Market)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAMarket.Market)
    MergeFrom(*source);
  }
}

void Market::MergeFrom(const Market& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAMarket.Market)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    _internal_mutable_head()->::DAMarket::Market_Head::MergeFrom(from._internal_head());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DAMarket::Market_Data::MergeFrom(from._internal_data());
  }
  if (from.has_depth()) {
    _internal_mutable_depth()->::DAMarket::Market_Depth::MergeFrom(from._internal_depth());
  }
  if (from.has_deal()) {
    _internal_mutable_deal()->::DAMarket::Market_Deal::MergeFrom(from._internal_deal());
  }
  if (from.has_heartbeat()) {
    _internal_mutable_heartbeat()->::DAMarket::Market_HeartBeat::MergeFrom(from._internal_heartbeat());
  }
}

void Market::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAMarket.Market)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Market::CopyFrom(const Market& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAMarket.Market)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Market::IsInitialized() const {
  return true;
}

void Market::InternalSwap(Market* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Market, heartbeat_)
      + sizeof(Market::heartbeat_)
      - PROTOBUF_FIELD_OFFSET(Market, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Market::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DAMarket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DAMarket::Market_Head* Arena::CreateMaybeMessage< ::DAMarket::Market_Head >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DAMarket::Market_Head >(arena);
}
template<> PROTOBUF_NOINLINE ::DAMarket::Market_PriceData* Arena::CreateMaybeMessage< ::DAMarket::Market_PriceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DAMarket::Market_PriceData >(arena);
}
template<> PROTOBUF_NOINLINE ::DAMarket::Market_Data* Arena::CreateMaybeMessage< ::DAMarket::Market_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DAMarket::Market_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::DAMarket::Market_Depth* Arena::CreateMaybeMessage< ::DAMarket::Market_Depth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DAMarket::Market_Depth >(arena);
}
template<> PROTOBUF_NOINLINE ::DAMarket::Market_Deal* Arena::CreateMaybeMessage< ::DAMarket::Market_Deal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DAMarket::Market_Deal >(arena);
}
template<> PROTOBUF_NOINLINE ::DAMarket::Market_HeartBeat* Arena::CreateMaybeMessage< ::DAMarket::Market_HeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DAMarket::Market_HeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::DAMarket::Market* Arena::CreateMaybeMessage< ::DAMarket::Market >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DAMarket::Market >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
