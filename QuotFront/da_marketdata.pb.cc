// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: da_marketdata.proto

#include "da_marketdata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace da {
namespace marketdata {
namespace v1 {
constexpr DAMarketDataMessage::DAMarketDataMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : market_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , timestamp_(PROTOBUF_ULONGLONG(0))
  , latency_(PROTOBUF_ULONGLONG(0)){}
struct DAMarketDataMessageDefaultTypeInternal {
  constexpr DAMarketDataMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DAMarketDataMessageDefaultTypeInternal() {}
  union {
    DAMarketDataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DAMarketDataMessageDefaultTypeInternal _DAMarketDataMessage_default_instance_;
constexpr DAMarketDataPacket::DAMarketDataPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , topic_(0u)
  , channel_(0u)
  , timestamp_(PROTOBUF_ULONGLONG(0))
  , sequence_(0u){}
struct DAMarketDataPacketDefaultTypeInternal {
  constexpr DAMarketDataPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DAMarketDataPacketDefaultTypeInternal() {}
  union {
    DAMarketDataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DAMarketDataPacketDefaultTypeInternal _DAMarketDataPacket_default_instance_;
constexpr DAOrderBookEntry::DAOrderBookEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_()
  , _order_cached_byte_size_()
  , price_(0)
  , quantity_(0u){}
struct DAOrderBookEntryDefaultTypeInternal {
  constexpr DAOrderBookEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DAOrderBookEntryDefaultTypeInternal() {}
  union {
    DAOrderBookEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DAOrderBookEntryDefaultTypeInternal _DAOrderBookEntry_default_instance_;
constexpr DAOrderBookMessage::DAOrderBookMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ask_queue_()
  , bid_queue_()
  , book_type_(0)
{}
struct DAOrderBookMessageDefaultTypeInternal {
  constexpr DAOrderBookMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DAOrderBookMessageDefaultTypeInternal() {}
  union {
    DAOrderBookMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DAOrderBookMessageDefaultTypeInternal _DAOrderBookMessage_default_instance_;
constexpr DATopOfBookAndLastTradeMessage::DATopOfBookAndLastTradeMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_price_(0)
  , ask_price_(0)
  , last_volume_(0u)
  , ask_volume_(0u)
  , bid_price_(0)
  , turnover_(0)
  , open_interest_(PROTOBUF_ULONGLONG(0))
  , volume_(PROTOBUF_ULONGLONG(0))
  , preo_price_(0)
  , post_price_(0)
  , bid_volume_(0u){}
struct DATopOfBookAndLastTradeMessageDefaultTypeInternal {
  constexpr DATopOfBookAndLastTradeMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DATopOfBookAndLastTradeMessageDefaultTypeInternal() {}
  union {
    DATopOfBookAndLastTradeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DATopOfBookAndLastTradeMessageDefaultTypeInternal _DATopOfBookAndLastTradeMessage_default_instance_;
constexpr DATradeStatisticsMessage::DATradeStatisticsMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pre_close_price_(0)
  , pre_settlement_price_(0)
  , pre_open_interest_(PROTOBUF_ULONGLONG(0))
  , open_price_(0)
  , close_price_(0)
  , settlement_price_(0)
  , day_highest_price_(0)
  , day_lowest_price_(0)
  , upper_limit_price_(0)
  , lower_limit_price_(0){}
struct DATradeStatisticsMessageDefaultTypeInternal {
  constexpr DATradeStatisticsMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DATradeStatisticsMessageDefaultTypeInternal() {}
  union {
    DATradeStatisticsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DATradeStatisticsMessageDefaultTypeInternal _DATradeStatisticsMessage_default_instance_;
constexpr DAStatusMessage::DAStatusMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , datetime_(PROTOBUF_ULONGLONG(0))
  , status_type_(0)

  , status_(0)
{}
struct DAStatusMessageDefaultTypeInternal {
  constexpr DAStatusMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DAStatusMessageDefaultTypeInternal() {}
  union {
    DAStatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DAStatusMessageDefaultTypeInternal _DAStatusMessage_default_instance_;
constexpr DABBMessage::DABBMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_message_(nullptr)
  , order_book_(nullptr)
  , statics_(nullptr)
  , status_(nullptr){}
struct DABBMessageDefaultTypeInternal {
  constexpr DABBMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DABBMessageDefaultTypeInternal() {}
  union {
    DABBMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DABBMessageDefaultTypeInternal _DABBMessage_default_instance_;
constexpr DAHeartbeatMessage::DAHeartbeatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datetime_(PROTOBUF_ULONGLONG(0)){}
struct DAHeartbeatMessageDefaultTypeInternal {
  constexpr DAHeartbeatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DAHeartbeatMessageDefaultTypeInternal() {}
  union {
    DAHeartbeatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DAHeartbeatMessageDefaultTypeInternal _DAHeartbeatMessage_default_instance_;
}  // namespace v1
}  // namespace marketdata
}  // namespace da
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_da_5fmarketdata_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_da_5fmarketdata_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_da_5fmarketdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_da_5fmarketdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataMessage, market_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataMessage, instrument_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataMessage, latency_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataMessage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataPacket, topic_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataPacket, channel_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataPacket, sequence_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataPacket, timestamp_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAMarketDataPacket, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookEntry, price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookEntry, quantity_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookEntry, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookMessage, book_type_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookMessage, ask_queue_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAOrderBookMessage, bid_queue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, last_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, last_volume_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, ask_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, ask_volume_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, bid_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, bid_volume_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, turnover_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, open_interest_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, volume_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, preo_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATopOfBookAndLastTradeMessage, post_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, pre_close_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, pre_open_interest_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, open_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, close_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, day_highest_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, day_lowest_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DATradeStatisticsMessage, lower_limit_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAStatusMessage, status_type_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAStatusMessage, datetime_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAStatusMessage, status_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAStatusMessage, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DABBMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DABBMessage, top_message_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DABBMessage, order_book_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DABBMessage, statics_),
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DABBMessage, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAHeartbeatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::da::marketdata::v1::DAHeartbeatMessage, datetime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::da::marketdata::v1::DAMarketDataMessage)},
  { 10, -1, sizeof(::da::marketdata::v1::DAMarketDataPacket)},
  { 20, -1, sizeof(::da::marketdata::v1::DAOrderBookEntry)},
  { 28, -1, sizeof(::da::marketdata::v1::DAOrderBookMessage)},
  { 36, -1, sizeof(::da::marketdata::v1::DATopOfBookAndLastTradeMessage)},
  { 52, -1, sizeof(::da::marketdata::v1::DATradeStatisticsMessage)},
  { 67, -1, sizeof(::da::marketdata::v1::DAStatusMessage)},
  { 76, -1, sizeof(::da::marketdata::v1::DABBMessage)},
  { 85, -1, sizeof(::da::marketdata::v1::DAHeartbeatMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DAMarketDataMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DAMarketDataPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DAOrderBookEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DAOrderBookMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DATopOfBookAndLastTradeMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DATradeStatisticsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DAStatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DABBMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::da::marketdata::v1::_DAHeartbeatMessage_default_instance_),
};

const char descriptor_table_protodef_da_5fmarketdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023da_marketdata.proto\022\020da.marketdata.v1\032"
  "\031google/protobuf/any.proto\"\201\001\n\023DAMarketD"
  "ataMessage\022\016\n\006market\030\001 \001(\t\022\022\n\ninstrument"
  "\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\004\022\017\n\007latency\030\004 \001"
  "(\004\022\"\n\004data\030\005 \001(\0132\024.google.protobuf.Any\"\222"
  "\001\n\022DAMarketDataPacket\022\r\n\005topic\030\001 \001(\r\022\017\n\007"
  "channel\030\002 \001(\r\022\020\n\010sequence\030\003 \001(\r\022\021\n\ttimes"
  "tamp\030\004 \001(\004\0227\n\010messages\030\005 \003(\0132%.da.market"
  "data.v1.DAMarketDataMessage\"B\n\020DAOrderBo"
  "okEntry\022\r\n\005price\030\001 \001(\001\022\020\n\010quantity\030\002 \001(\r"
  "\022\r\n\005order\030\003 \003(\r\"\247\002\n\022DAOrderBookMessage\022@"
  "\n\tbook_type\030\001 \001(\0162-.da.marketdata.v1.DAO"
  "rderBookMessage.BookType\0225\n\task_queue\030\002 "
  "\003(\0132\".da.marketdata.v1.DAOrderBookEntry\022"
  "5\n\tbid_queue\030\003 \003(\0132\".da.marketdata.v1.DA"
  "OrderBookEntry\"a\n\010BookType\022\027\n\023BOOK_TYPE_"
  "UNDEFINED\020\000\022\035\n\031BOOK_TYPE_MARKET_BY_PRICE"
  "\020\001\022\035\n\031BOOK_TYPE_MARKET_BY_ORDER\020\002\"\370\001\n\036DA"
  "TopOfBookAndLastTradeMessage\022\022\n\nlast_pri"
  "ce\030\001 \001(\001\022\023\n\013last_volume\030\002 \001(\r\022\021\n\task_pri"
  "ce\030\003 \001(\001\022\022\n\nask_volume\030\004 \001(\r\022\021\n\tbid_pric"
  "e\030\005 \001(\001\022\022\n\nbid_volume\030\006 \001(\r\022\020\n\010turnover\030"
  "\007 \001(\001\022\025\n\ropen_interest\030\010 \001(\004\022\016\n\006volume\030\t"
  " \001(\004\022\022\n\npreo_price\030\n \001(\001\022\022\n\npost_price\030\013"
  " \001(\001\"\232\002\n\030DATradeStatisticsMessage\022\027\n\017pre"
  "_close_price\030\001 \001(\001\022\034\n\024pre_settlement_pri"
  "ce\030\002 \001(\001\022\031\n\021pre_open_interest\030\003 \001(\004\022\022\n\no"
  "pen_price\030\004 \001(\001\022\023\n\013close_price\030\005 \001(\001\022\030\n\020"
  "settlement_price\030\006 \001(\001\022\031\n\021day_highest_pr"
  "ice\030\007 \001(\001\022\030\n\020day_lowest_price\030\010 \001(\001\022\031\n\021u"
  "pper_limit_price\030\t \001(\001\022\031\n\021lower_limit_pr"
  "ice\030\n \001(\001\"\364\002\n\017DAStatusMessage\022A\n\013status_"
  "type\030\001 \001(\0162,.da.marketdata.v1.DAStatusMe"
  "ssage.StatusType\022\020\n\010datetime\030\002 \001(\004\022=\n\006st"
  "atus\030\003 \001(\0162-.da.marketdata.v1.DAStatusMe"
  "ssage.TradeStatus\022\023\n\013description\030\004 \001(\t\"["
  "\n\nStatusType\022\031\n\025STATUS_TYPE_UNDEFINED\020\000\022"
  "\026\n\022STATUS_TYPE_MARKET\020\001\022\032\n\026STATUS_TYPE_I"
  "NSTRUMENT\020\002\"[\n\013TradeStatus\022\026\n\022STATUS_NOT"
  "_TRADING\020\000\022\017\n\013STATUS_PREO\020\001\022\022\n\016STATUS_TR"
  "ADING\020\002\022\017\n\013STATUS_POST\020\003\"\376\001\n\013DABBMessage"
  "\022E\n\013top_message\030\001 \001(\01320.da.marketdata.v1"
  ".DATopOfBookAndLastTradeMessage\0228\n\norder"
  "_book\030\002 \001(\0132$.da.marketdata.v1.DAOrderBo"
  "okMessage\022;\n\007statics\030\003 \001(\0132*.da.marketda"
  "ta.v1.DATradeStatisticsMessage\0221\n\006status"
  "\030\004 \001(\0132!.da.marketdata.v1.DAStatusMessag"
  "e\"&\n\022DAHeartbeatMessage\022\020\n\010datetime\030\001 \001("
  "\004B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_da_5fmarketdata_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_da_5fmarketdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_da_5fmarketdata_2eproto = {
  false, false, 1933, descriptor_table_protodef_da_5fmarketdata_2eproto, "da_marketdata.proto", 
  &descriptor_table_da_5fmarketdata_2eproto_once, descriptor_table_da_5fmarketdata_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_da_5fmarketdata_2eproto::offsets,
  file_level_metadata_da_5fmarketdata_2eproto, file_level_enum_descriptors_da_5fmarketdata_2eproto, file_level_service_descriptors_da_5fmarketdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_da_5fmarketdata_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_da_5fmarketdata_2eproto);
  return descriptor_table_da_5fmarketdata_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_da_5fmarketdata_2eproto(&descriptor_table_da_5fmarketdata_2eproto);
namespace da {
namespace marketdata {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAOrderBookMessage_BookType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_da_5fmarketdata_2eproto);
  return file_level_enum_descriptors_da_5fmarketdata_2eproto[0];
}
bool DAOrderBookMessage_BookType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DAOrderBookMessage_BookType DAOrderBookMessage::BOOK_TYPE_UNDEFINED;
constexpr DAOrderBookMessage_BookType DAOrderBookMessage::BOOK_TYPE_MARKET_BY_PRICE;
constexpr DAOrderBookMessage_BookType DAOrderBookMessage::BOOK_TYPE_MARKET_BY_ORDER;
constexpr DAOrderBookMessage_BookType DAOrderBookMessage::BookType_MIN;
constexpr DAOrderBookMessage_BookType DAOrderBookMessage::BookType_MAX;
constexpr int DAOrderBookMessage::BookType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAStatusMessage_StatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_da_5fmarketdata_2eproto);
  return file_level_enum_descriptors_da_5fmarketdata_2eproto[1];
}
bool DAStatusMessage_StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DAStatusMessage_StatusType DAStatusMessage::STATUS_TYPE_UNDEFINED;
constexpr DAStatusMessage_StatusType DAStatusMessage::STATUS_TYPE_MARKET;
constexpr DAStatusMessage_StatusType DAStatusMessage::STATUS_TYPE_INSTRUMENT;
constexpr DAStatusMessage_StatusType DAStatusMessage::StatusType_MIN;
constexpr DAStatusMessage_StatusType DAStatusMessage::StatusType_MAX;
constexpr int DAStatusMessage::StatusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAStatusMessage_TradeStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_da_5fmarketdata_2eproto);
  return file_level_enum_descriptors_da_5fmarketdata_2eproto[2];
}
bool DAStatusMessage_TradeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DAStatusMessage_TradeStatus DAStatusMessage::STATUS_NOT_TRADING;
constexpr DAStatusMessage_TradeStatus DAStatusMessage::STATUS_PREO;
constexpr DAStatusMessage_TradeStatus DAStatusMessage::STATUS_TRADING;
constexpr DAStatusMessage_TradeStatus DAStatusMessage::STATUS_POST;
constexpr DAStatusMessage_TradeStatus DAStatusMessage::TradeStatus_MIN;
constexpr DAStatusMessage_TradeStatus DAStatusMessage::TradeStatus_MAX;
constexpr int DAStatusMessage::TradeStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class DAMarketDataMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const DAMarketDataMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
DAMarketDataMessage::_Internal::data(const DAMarketDataMessage* msg) {
  return *msg->data_;
}
void DAMarketDataMessage::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
DAMarketDataMessage::DAMarketDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DAMarketDataMessage)
}
DAMarketDataMessage::DAMarketDataMessage(const DAMarketDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_market().empty()) {
    market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market(), 
      GetArena());
  }
  instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument().empty()) {
    instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument(), 
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(latency_));
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DAMarketDataMessage)
}

void DAMarketDataMessage::SharedCtor() {
market_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&data_)) + sizeof(latency_));
}

DAMarketDataMessage::~DAMarketDataMessage() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DAMarketDataMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAMarketDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  market_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void DAMarketDataMessage::ArenaDtor(void* object) {
  DAMarketDataMessage* _this = reinterpret_cast< DAMarketDataMessage* >(object);
  (void)_this;
}
void DAMarketDataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAMarketDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAMarketDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DAMarketDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmpty();
  instrument_.ClearToEmpty();
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(latency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAMarketDataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string market = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_market();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "da.marketdata.v1.DAMarketDataMessage.market"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrument();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "da.marketdata.v1.DAMarketDataMessage.instrument"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 latency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAMarketDataMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DAMarketDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_market().data(), static_cast<int>(this->_internal_market().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "da.marketdata.v1.DAMarketDataMessage.market");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_market(), target);
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument().data(), static_cast<int>(this->_internal_instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "da.marketdata.v1.DAMarketDataMessage.instrument");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // uint64 latency = 4;
  if (this->latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_latency(), target);
  }

  // .google.protobuf.Any data = 5;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DAMarketDataMessage)
  return target;
}

size_t DAMarketDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DAMarketDataMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market = 1;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_market());
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument());
  }

  // .google.protobuf.Any data = 5;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 latency = 4;
  if (this->latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAMarketDataMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DAMarketDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DAMarketDataMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAMarketDataMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DAMarketDataMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DAMarketDataMessage)
    MergeFrom(*source);
  }
}

void DAMarketDataMessage::MergeFrom(const DAMarketDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DAMarketDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {
    _internal_set_market(from._internal_market());
  }
  if (from.instrument().size() > 0) {
    _internal_set_instrument(from._internal_instrument());
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.latency() != 0) {
    _internal_set_latency(from._internal_latency());
  }
}

void DAMarketDataMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DAMarketDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAMarketDataMessage::CopyFrom(const DAMarketDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DAMarketDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAMarketDataMessage::IsInitialized() const {
  return true;
}

void DAMarketDataMessage::InternalSwap(DAMarketDataMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_.Swap(&other->market_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_.Swap(&other->instrument_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAMarketDataMessage, latency_)
      + sizeof(DAMarketDataMessage::latency_)
      - PROTOBUF_FIELD_OFFSET(DAMarketDataMessage, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAMarketDataMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DAMarketDataPacket::_Internal {
 public:
};

DAMarketDataPacket::DAMarketDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DAMarketDataPacket)
}
DAMarketDataPacket::DAMarketDataPacket(const DAMarketDataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&topic_, &from.topic_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DAMarketDataPacket)
}

void DAMarketDataPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(sequence_));
}

DAMarketDataPacket::~DAMarketDataPacket() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DAMarketDataPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAMarketDataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DAMarketDataPacket::ArenaDtor(void* object) {
  DAMarketDataPacket* _this = reinterpret_cast< DAMarketDataPacket* >(object);
  (void)_this;
}
void DAMarketDataPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAMarketDataPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAMarketDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DAMarketDataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  ::memset(&topic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&topic_)) + sizeof(sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAMarketDataPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          topic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .da.marketdata.v1.DAMarketDataMessage messages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAMarketDataPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DAMarketDataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 topic = 1;
  if (this->topic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_topic(), target);
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel(), target);
  }

  // uint32 sequence = 3;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence(), target);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // repeated .da.marketdata.v1.DAMarketDataMessage messages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DAMarketDataPacket)
  return target;
}

size_t DAMarketDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DAMarketDataPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .da.marketdata.v1.DAMarketDataMessage messages = 5;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 topic = 1;
  if (this->topic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_topic());
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel());
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAMarketDataPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DAMarketDataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const DAMarketDataPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAMarketDataPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DAMarketDataPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DAMarketDataPacket)
    MergeFrom(*source);
  }
}

void DAMarketDataPacket::MergeFrom(const DAMarketDataPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DAMarketDataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.topic() != 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void DAMarketDataPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DAMarketDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAMarketDataPacket::CopyFrom(const DAMarketDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DAMarketDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAMarketDataPacket::IsInitialized() const {
  return true;
}

void DAMarketDataPacket::InternalSwap(DAMarketDataPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAMarketDataPacket, sequence_)
      + sizeof(DAMarketDataPacket::sequence_)
      - PROTOBUF_FIELD_OFFSET(DAMarketDataPacket, topic_)>(
          reinterpret_cast<char*>(&topic_),
          reinterpret_cast<char*>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAMarketDataPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DAOrderBookEntry::_Internal {
 public:
};

DAOrderBookEntry::DAOrderBookEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DAOrderBookEntry)
}
DAOrderBookEntry::DAOrderBookEntry(const DAOrderBookEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      order_(from.order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DAOrderBookEntry)
}

void DAOrderBookEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
}

DAOrderBookEntry::~DAOrderBookEntry() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DAOrderBookEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAOrderBookEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DAOrderBookEntry::ArenaDtor(void* object) {
  DAOrderBookEntry* _this = reinterpret_cast< DAOrderBookEntry* >(object);
  (void)_this;
}
void DAOrderBookEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAOrderBookEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAOrderBookEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DAOrderBookEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_.Clear();
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAOrderBookEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_order(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_order(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAOrderBookEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DAOrderBookEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_price(), target);
  }

  // uint32 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // repeated uint32 order = 3;
  {
    int byte_size = _order_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_order(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DAOrderBookEntry)
  return target;
}

size_t DAOrderBookEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DAOrderBookEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 order = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->order_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _order_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAOrderBookEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DAOrderBookEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DAOrderBookEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAOrderBookEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DAOrderBookEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DAOrderBookEntry)
    MergeFrom(*source);
  }
}

void DAOrderBookEntry::MergeFrom(const DAOrderBookEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DAOrderBookEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_.MergeFrom(from.order_);
  if (!(from.price() <= 0 && from.price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void DAOrderBookEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DAOrderBookEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAOrderBookEntry::CopyFrom(const DAOrderBookEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DAOrderBookEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAOrderBookEntry::IsInitialized() const {
  return true;
}

void DAOrderBookEntry::InternalSwap(DAOrderBookEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  order_.InternalSwap(&other->order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAOrderBookEntry, quantity_)
      + sizeof(DAOrderBookEntry::quantity_)
      - PROTOBUF_FIELD_OFFSET(DAOrderBookEntry, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAOrderBookEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DAOrderBookMessage::_Internal {
 public:
};

DAOrderBookMessage::DAOrderBookMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ask_queue_(arena),
  bid_queue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DAOrderBookMessage)
}
DAOrderBookMessage::DAOrderBookMessage(const DAOrderBookMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ask_queue_(from.ask_queue_),
      bid_queue_(from.bid_queue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  book_type_ = from.book_type_;
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DAOrderBookMessage)
}

void DAOrderBookMessage::SharedCtor() {
book_type_ = 0;
}

DAOrderBookMessage::~DAOrderBookMessage() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DAOrderBookMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAOrderBookMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DAOrderBookMessage::ArenaDtor(void* object) {
  DAOrderBookMessage* _this = reinterpret_cast< DAOrderBookMessage* >(object);
  (void)_this;
}
void DAOrderBookMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAOrderBookMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAOrderBookMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DAOrderBookMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_queue_.Clear();
  bid_queue_.Clear();
  book_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAOrderBookMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .da.marketdata.v1.DAOrderBookMessage.BookType book_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_book_type(static_cast<::da::marketdata::v1::DAOrderBookMessage_BookType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .da.marketdata.v1.DAOrderBookEntry ask_queue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ask_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .da.marketdata.v1.DAOrderBookEntry bid_queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bid_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAOrderBookMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DAOrderBookMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .da.marketdata.v1.DAOrderBookMessage.BookType book_type = 1;
  if (this->book_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_book_type(), target);
  }

  // repeated .da.marketdata.v1.DAOrderBookEntry ask_queue = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ask_queue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ask_queue(i), target, stream);
  }

  // repeated .da.marketdata.v1.DAOrderBookEntry bid_queue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bid_queue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bid_queue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DAOrderBookMessage)
  return target;
}

size_t DAOrderBookMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DAOrderBookMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .da.marketdata.v1.DAOrderBookEntry ask_queue = 2;
  total_size += 1UL * this->_internal_ask_queue_size();
  for (const auto& msg : this->ask_queue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .da.marketdata.v1.DAOrderBookEntry bid_queue = 3;
  total_size += 1UL * this->_internal_bid_queue_size();
  for (const auto& msg : this->bid_queue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .da.marketdata.v1.DAOrderBookMessage.BookType book_type = 1;
  if (this->book_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_book_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAOrderBookMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DAOrderBookMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DAOrderBookMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAOrderBookMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DAOrderBookMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DAOrderBookMessage)
    MergeFrom(*source);
  }
}

void DAOrderBookMessage::MergeFrom(const DAOrderBookMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DAOrderBookMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ask_queue_.MergeFrom(from.ask_queue_);
  bid_queue_.MergeFrom(from.bid_queue_);
  if (from.book_type() != 0) {
    _internal_set_book_type(from._internal_book_type());
  }
}

void DAOrderBookMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DAOrderBookMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAOrderBookMessage::CopyFrom(const DAOrderBookMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DAOrderBookMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAOrderBookMessage::IsInitialized() const {
  return true;
}

void DAOrderBookMessage::InternalSwap(DAOrderBookMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ask_queue_.InternalSwap(&other->ask_queue_);
  bid_queue_.InternalSwap(&other->bid_queue_);
  swap(book_type_, other->book_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DAOrderBookMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DATopOfBookAndLastTradeMessage::_Internal {
 public:
};

DATopOfBookAndLastTradeMessage::DATopOfBookAndLastTradeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
}
DATopOfBookAndLastTradeMessage::DATopOfBookAndLastTradeMessage(const DATopOfBookAndLastTradeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_price_, &from.last_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&bid_volume_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(bid_volume_));
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
}

void DATopOfBookAndLastTradeMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bid_volume_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(bid_volume_));
}

DATopOfBookAndLastTradeMessage::~DATopOfBookAndLastTradeMessage() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DATopOfBookAndLastTradeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DATopOfBookAndLastTradeMessage::ArenaDtor(void* object) {
  DATopOfBookAndLastTradeMessage* _this = reinterpret_cast< DATopOfBookAndLastTradeMessage* >(object);
  (void)_this;
}
void DATopOfBookAndLastTradeMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DATopOfBookAndLastTradeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DATopOfBookAndLastTradeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bid_volume_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(bid_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DATopOfBookAndLastTradeMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double last_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          last_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 last_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ask_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 ask_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ask_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 bid_volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bid_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 open_interest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double preo_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          preo_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double post_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          post_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DATopOfBookAndLastTradeMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double last_price = 1;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_last_price(), target);
  }

  // uint32 last_volume = 2;
  if (this->last_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_volume(), target);
  }

  // double ask_price = 3;
  if (!(this->ask_price() <= 0 && this->ask_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ask_price(), target);
  }

  // uint32 ask_volume = 4;
  if (this->ask_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ask_volume(), target);
  }

  // double bid_price = 5;
  if (!(this->bid_price() <= 0 && this->bid_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bid_price(), target);
  }

  // uint32 bid_volume = 6;
  if (this->bid_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bid_volume(), target);
  }

  // double turnover = 7;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_turnover(), target);
  }

  // uint64 open_interest = 8;
  if (this->open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_open_interest(), target);
  }

  // uint64 volume = 9;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_volume(), target);
  }

  // double preo_price = 10;
  if (!(this->preo_price() <= 0 && this->preo_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_preo_price(), target);
  }

  // double post_price = 11;
  if (!(this->post_price() <= 0 && this->post_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_post_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  return target;
}

size_t DATopOfBookAndLastTradeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double last_price = 1;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double ask_price = 3;
  if (!(this->ask_price() <= 0 && this->ask_price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 last_volume = 2;
  if (this->last_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_volume());
  }

  // uint32 ask_volume = 4;
  if (this->ask_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ask_volume());
  }

  // double bid_price = 5;
  if (!(this->bid_price() <= 0 && this->bid_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double turnover = 7;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 open_interest = 8;
  if (this->open_interest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open_interest());
  }

  // uint64 volume = 9;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_volume());
  }

  // double preo_price = 10;
  if (!(this->preo_price() <= 0 && this->preo_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double post_price = 11;
  if (!(this->post_price() <= 0 && this->post_price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 bid_volume = 6;
  if (this->bid_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bid_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DATopOfBookAndLastTradeMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DATopOfBookAndLastTradeMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DATopOfBookAndLastTradeMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
    MergeFrom(*source);
  }
}

void DATopOfBookAndLastTradeMessage::MergeFrom(const DATopOfBookAndLastTradeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.last_price() <= 0 && from.last_price() >= 0)) {
    _internal_set_last_price(from._internal_last_price());
  }
  if (!(from.ask_price() <= 0 && from.ask_price() >= 0)) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from.last_volume() != 0) {
    _internal_set_last_volume(from._internal_last_volume());
  }
  if (from.ask_volume() != 0) {
    _internal_set_ask_volume(from._internal_ask_volume());
  }
  if (!(from.bid_price() <= 0 && from.bid_price() >= 0)) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (from.open_interest() != 0) {
    _internal_set_open_interest(from._internal_open_interest());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (!(from.preo_price() <= 0 && from.preo_price() >= 0)) {
    _internal_set_preo_price(from._internal_preo_price());
  }
  if (!(from.post_price() <= 0 && from.post_price() >= 0)) {
    _internal_set_post_price(from._internal_post_price());
  }
  if (from.bid_volume() != 0) {
    _internal_set_bid_volume(from._internal_bid_volume());
  }
}

void DATopOfBookAndLastTradeMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DATopOfBookAndLastTradeMessage::CopyFrom(const DATopOfBookAndLastTradeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DATopOfBookAndLastTradeMessage::IsInitialized() const {
  return true;
}

void DATopOfBookAndLastTradeMessage::InternalSwap(DATopOfBookAndLastTradeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DATopOfBookAndLastTradeMessage, bid_volume_)
      + sizeof(DATopOfBookAndLastTradeMessage::bid_volume_)
      - PROTOBUF_FIELD_OFFSET(DATopOfBookAndLastTradeMessage, last_price_)>(
          reinterpret_cast<char*>(&last_price_),
          reinterpret_cast<char*>(&other->last_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DATopOfBookAndLastTradeMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DATradeStatisticsMessage::_Internal {
 public:
};

DATradeStatisticsMessage::DATradeStatisticsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DATradeStatisticsMessage)
}
DATradeStatisticsMessage::DATradeStatisticsMessage(const DATradeStatisticsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pre_close_price_, &from.pre_close_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_limit_price_) -
    reinterpret_cast<char*>(&pre_close_price_)) + sizeof(lower_limit_price_));
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DATradeStatisticsMessage)
}

void DATradeStatisticsMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pre_close_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lower_limit_price_) -
    reinterpret_cast<char*>(&pre_close_price_)) + sizeof(lower_limit_price_));
}

DATradeStatisticsMessage::~DATradeStatisticsMessage() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DATradeStatisticsMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DATradeStatisticsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DATradeStatisticsMessage::ArenaDtor(void* object) {
  DATradeStatisticsMessage* _this = reinterpret_cast< DATradeStatisticsMessage* >(object);
  (void)_this;
}
void DATradeStatisticsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DATradeStatisticsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DATradeStatisticsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DATradeStatisticsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_close_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_limit_price_) -
      reinterpret_cast<char*>(&pre_close_price_)) + sizeof(lower_limit_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DATradeStatisticsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double pre_close_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          pre_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settlement_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 pre_open_interest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pre_open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          open_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double settlement_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double day_highest_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          day_highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double day_lowest_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          day_lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double upper_limit_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          upper_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          lower_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DATradeStatisticsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DATradeStatisticsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pre_close_price = 1;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pre_close_price(), target);
  }

  // double pre_settlement_price = 2;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pre_settlement_price(), target);
  }

  // uint64 pre_open_interest = 3;
  if (this->pre_open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pre_open_interest(), target);
  }

  // double open_price = 4;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_open_price(), target);
  }

  // double close_price = 5;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_close_price(), target);
  }

  // double settlement_price = 6;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_settlement_price(), target);
  }

  // double day_highest_price = 7;
  if (!(this->day_highest_price() <= 0 && this->day_highest_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_day_highest_price(), target);
  }

  // double day_lowest_price = 8;
  if (!(this->day_lowest_price() <= 0 && this->day_lowest_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_day_lowest_price(), target);
  }

  // double upper_limit_price = 9;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_upper_limit_price(), target);
  }

  // double lower_limit_price = 10;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_lower_limit_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DATradeStatisticsMessage)
  return target;
}

size_t DATradeStatisticsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DATradeStatisticsMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pre_close_price = 1;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_settlement_price = 2;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 pre_open_interest = 3;
  if (this->pre_open_interest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pre_open_interest());
  }

  // double open_price = 4;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_price = 5;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double settlement_price = 6;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double day_highest_price = 7;
  if (!(this->day_highest_price() <= 0 && this->day_highest_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double day_lowest_price = 8;
  if (!(this->day_lowest_price() <= 0 && this->day_lowest_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double upper_limit_price = 9;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double lower_limit_price = 10;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DATradeStatisticsMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DATradeStatisticsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DATradeStatisticsMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DATradeStatisticsMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DATradeStatisticsMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DATradeStatisticsMessage)
    MergeFrom(*source);
  }
}

void DATradeStatisticsMessage::MergeFrom(const DATradeStatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DATradeStatisticsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.pre_close_price() <= 0 && from.pre_close_price() >= 0)) {
    _internal_set_pre_close_price(from._internal_pre_close_price());
  }
  if (!(from.pre_settlement_price() <= 0 && from.pre_settlement_price() >= 0)) {
    _internal_set_pre_settlement_price(from._internal_pre_settlement_price());
  }
  if (from.pre_open_interest() != 0) {
    _internal_set_pre_open_interest(from._internal_pre_open_interest());
  }
  if (!(from.open_price() <= 0 && from.open_price() >= 0)) {
    _internal_set_open_price(from._internal_open_price());
  }
  if (!(from.close_price() <= 0 && from.close_price() >= 0)) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (!(from.settlement_price() <= 0 && from.settlement_price() >= 0)) {
    _internal_set_settlement_price(from._internal_settlement_price());
  }
  if (!(from.day_highest_price() <= 0 && from.day_highest_price() >= 0)) {
    _internal_set_day_highest_price(from._internal_day_highest_price());
  }
  if (!(from.day_lowest_price() <= 0 && from.day_lowest_price() >= 0)) {
    _internal_set_day_lowest_price(from._internal_day_lowest_price());
  }
  if (!(from.upper_limit_price() <= 0 && from.upper_limit_price() >= 0)) {
    _internal_set_upper_limit_price(from._internal_upper_limit_price());
  }
  if (!(from.lower_limit_price() <= 0 && from.lower_limit_price() >= 0)) {
    _internal_set_lower_limit_price(from._internal_lower_limit_price());
  }
}

void DATradeStatisticsMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DATradeStatisticsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DATradeStatisticsMessage::CopyFrom(const DATradeStatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DATradeStatisticsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DATradeStatisticsMessage::IsInitialized() const {
  return true;
}

void DATradeStatisticsMessage::InternalSwap(DATradeStatisticsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DATradeStatisticsMessage, lower_limit_price_)
      + sizeof(DATradeStatisticsMessage::lower_limit_price_)
      - PROTOBUF_FIELD_OFFSET(DATradeStatisticsMessage, pre_close_price_)>(
          reinterpret_cast<char*>(&pre_close_price_),
          reinterpret_cast<char*>(&other->pre_close_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DATradeStatisticsMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DAStatusMessage::_Internal {
 public:
};

DAStatusMessage::DAStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DAStatusMessage)
}
DAStatusMessage::DAStatusMessage(const DAStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DAStatusMessage)
}

void DAStatusMessage::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&datetime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(status_));
}

DAStatusMessage::~DAStatusMessage() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DAStatusMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DAStatusMessage::ArenaDtor(void* object) {
  DAStatusMessage* _this = reinterpret_cast< DAStatusMessage* >(object);
  (void)_this;
}
void DAStatusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DAStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAStatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .da.marketdata.v1.DAStatusMessage.StatusType status_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_type(static_cast<::da::marketdata::v1::DAStatusMessage_StatusType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 datetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .da.marketdata.v1.DAStatusMessage.TradeStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::da::marketdata::v1::DAStatusMessage_TradeStatus>(val));
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "da.marketdata.v1.DAStatusMessage.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAStatusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DAStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .da.marketdata.v1.DAStatusMessage.StatusType status_type = 1;
  if (this->status_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status_type(), target);
  }

  // uint64 datetime = 2;
  if (this->datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_datetime(), target);
  }

  // .da.marketdata.v1.DAStatusMessage.TradeStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "da.marketdata.v1.DAStatusMessage.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DAStatusMessage)
  return target;
}

size_t DAStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DAStatusMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint64 datetime = 2;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_datetime());
  }

  // .da.marketdata.v1.DAStatusMessage.StatusType status_type = 1;
  if (this->status_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status_type());
  }

  // .da.marketdata.v1.DAStatusMessage.TradeStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAStatusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DAStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DAStatusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAStatusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DAStatusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DAStatusMessage)
    MergeFrom(*source);
  }
}

void DAStatusMessage::MergeFrom(const DAStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DAStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.datetime() != 0) {
    _internal_set_datetime(from._internal_datetime());
  }
  if (from.status_type() != 0) {
    _internal_set_status_type(from._internal_status_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DAStatusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DAStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAStatusMessage::CopyFrom(const DAStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DAStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAStatusMessage::IsInitialized() const {
  return true;
}

void DAStatusMessage::InternalSwap(DAStatusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DAStatusMessage, status_)
      + sizeof(DAStatusMessage::status_)
      - PROTOBUF_FIELD_OFFSET(DAStatusMessage, datetime_)>(
          reinterpret_cast<char*>(&datetime_),
          reinterpret_cast<char*>(&other->datetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DAStatusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DABBMessage::_Internal {
 public:
  static const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage& top_message(const DABBMessage* msg);
  static const ::da::marketdata::v1::DAOrderBookMessage& order_book(const DABBMessage* msg);
  static const ::da::marketdata::v1::DATradeStatisticsMessage& statics(const DABBMessage* msg);
  static const ::da::marketdata::v1::DAStatusMessage& status(const DABBMessage* msg);
};

const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage&
DABBMessage::_Internal::top_message(const DABBMessage* msg) {
  return *msg->top_message_;
}
const ::da::marketdata::v1::DAOrderBookMessage&
DABBMessage::_Internal::order_book(const DABBMessage* msg) {
  return *msg->order_book_;
}
const ::da::marketdata::v1::DATradeStatisticsMessage&
DABBMessage::_Internal::statics(const DABBMessage* msg) {
  return *msg->statics_;
}
const ::da::marketdata::v1::DAStatusMessage&
DABBMessage::_Internal::status(const DABBMessage* msg) {
  return *msg->status_;
}
DABBMessage::DABBMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DABBMessage)
}
DABBMessage::DABBMessage(const DABBMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_top_message()) {
    top_message_ = new ::da::marketdata::v1::DATopOfBookAndLastTradeMessage(*from.top_message_);
  } else {
    top_message_ = nullptr;
  }
  if (from._internal_has_order_book()) {
    order_book_ = new ::da::marketdata::v1::DAOrderBookMessage(*from.order_book_);
  } else {
    order_book_ = nullptr;
  }
  if (from._internal_has_statics()) {
    statics_ = new ::da::marketdata::v1::DATradeStatisticsMessage(*from.statics_);
  } else {
    statics_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::da::marketdata::v1::DAStatusMessage(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DABBMessage)
}

void DABBMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&top_message_)) + sizeof(status_));
}

DABBMessage::~DABBMessage() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DABBMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DABBMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete top_message_;
  if (this != internal_default_instance()) delete order_book_;
  if (this != internal_default_instance()) delete statics_;
  if (this != internal_default_instance()) delete status_;
}

void DABBMessage::ArenaDtor(void* object) {
  DABBMessage* _this = reinterpret_cast< DABBMessage* >(object);
  (void)_this;
}
void DABBMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DABBMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DABBMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DABBMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && top_message_ != nullptr) {
    delete top_message_;
  }
  top_message_ = nullptr;
  if (GetArena() == nullptr && order_book_ != nullptr) {
    delete order_book_;
  }
  order_book_ = nullptr;
  if (GetArena() == nullptr && statics_ != nullptr) {
    delete statics_;
  }
  statics_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DABBMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .da.marketdata.v1.DATopOfBookAndLastTradeMessage top_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .da.marketdata.v1.DAOrderBookMessage order_book = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_book(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .da.marketdata.v1.DATradeStatisticsMessage statics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_statics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .da.marketdata.v1.DAStatusMessage status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DABBMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DABBMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .da.marketdata.v1.DATopOfBookAndLastTradeMessage top_message = 1;
  if (this->has_top_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::top_message(this), target, stream);
  }

  // .da.marketdata.v1.DAOrderBookMessage order_book = 2;
  if (this->has_order_book()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::order_book(this), target, stream);
  }

  // .da.marketdata.v1.DATradeStatisticsMessage statics = 3;
  if (this->has_statics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::statics(this), target, stream);
  }

  // .da.marketdata.v1.DAStatusMessage status = 4;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DABBMessage)
  return target;
}

size_t DABBMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DABBMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .da.marketdata.v1.DATopOfBookAndLastTradeMessage top_message = 1;
  if (this->has_top_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_message_);
  }

  // .da.marketdata.v1.DAOrderBookMessage order_book = 2;
  if (this->has_order_book()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_book_);
  }

  // .da.marketdata.v1.DATradeStatisticsMessage statics = 3;
  if (this->has_statics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statics_);
  }

  // .da.marketdata.v1.DAStatusMessage status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DABBMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DABBMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DABBMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DABBMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DABBMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DABBMessage)
    MergeFrom(*source);
  }
}

void DABBMessage::MergeFrom(const DABBMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DABBMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_top_message()) {
    _internal_mutable_top_message()->::da::marketdata::v1::DATopOfBookAndLastTradeMessage::MergeFrom(from._internal_top_message());
  }
  if (from.has_order_book()) {
    _internal_mutable_order_book()->::da::marketdata::v1::DAOrderBookMessage::MergeFrom(from._internal_order_book());
  }
  if (from.has_statics()) {
    _internal_mutable_statics()->::da::marketdata::v1::DATradeStatisticsMessage::MergeFrom(from._internal_statics());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::da::marketdata::v1::DAStatusMessage::MergeFrom(from._internal_status());
  }
}

void DABBMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DABBMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DABBMessage::CopyFrom(const DABBMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DABBMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DABBMessage::IsInitialized() const {
  return true;
}

void DABBMessage::InternalSwap(DABBMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DABBMessage, status_)
      + sizeof(DABBMessage::status_)
      - PROTOBUF_FIELD_OFFSET(DABBMessage, top_message_)>(
          reinterpret_cast<char*>(&top_message_),
          reinterpret_cast<char*>(&other->top_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DABBMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DAHeartbeatMessage::_Internal {
 public:
};

DAHeartbeatMessage::DAHeartbeatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:da.marketdata.v1.DAHeartbeatMessage)
}
DAHeartbeatMessage::DAHeartbeatMessage(const DAHeartbeatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetime_ = from.datetime_;
  // @@protoc_insertion_point(copy_constructor:da.marketdata.v1.DAHeartbeatMessage)
}

void DAHeartbeatMessage::SharedCtor() {
datetime_ = PROTOBUF_ULONGLONG(0);
}

DAHeartbeatMessage::~DAHeartbeatMessage() {
  // @@protoc_insertion_point(destructor:da.marketdata.v1.DAHeartbeatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DAHeartbeatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DAHeartbeatMessage::ArenaDtor(void* object) {
  DAHeartbeatMessage* _this = reinterpret_cast< DAHeartbeatMessage* >(object);
  (void)_this;
}
void DAHeartbeatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DAHeartbeatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DAHeartbeatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:da.marketdata.v1.DAHeartbeatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetime_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DAHeartbeatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 datetime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          datetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DAHeartbeatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:da.marketdata.v1.DAHeartbeatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 datetime = 1;
  if (this->datetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_datetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:da.marketdata.v1.DAHeartbeatMessage)
  return target;
}

size_t DAHeartbeatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:da.marketdata.v1.DAHeartbeatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 datetime = 1;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_datetime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DAHeartbeatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:da.marketdata.v1.DAHeartbeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DAHeartbeatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DAHeartbeatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:da.marketdata.v1.DAHeartbeatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:da.marketdata.v1.DAHeartbeatMessage)
    MergeFrom(*source);
  }
}

void DAHeartbeatMessage::MergeFrom(const DAHeartbeatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:da.marketdata.v1.DAHeartbeatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime() != 0) {
    _internal_set_datetime(from._internal_datetime());
  }
}

void DAHeartbeatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:da.marketdata.v1.DAHeartbeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAHeartbeatMessage::CopyFrom(const DAHeartbeatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:da.marketdata.v1.DAHeartbeatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DAHeartbeatMessage::IsInitialized() const {
  return true;
}

void DAHeartbeatMessage::InternalSwap(DAHeartbeatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(datetime_, other->datetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DAHeartbeatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace marketdata
}  // namespace da
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DAMarketDataMessage* Arena::CreateMaybeMessage< ::da::marketdata::v1::DAMarketDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DAMarketDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DAMarketDataPacket* Arena::CreateMaybeMessage< ::da::marketdata::v1::DAMarketDataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DAMarketDataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DAOrderBookEntry* Arena::CreateMaybeMessage< ::da::marketdata::v1::DAOrderBookEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DAOrderBookEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DAOrderBookMessage* Arena::CreateMaybeMessage< ::da::marketdata::v1::DAOrderBookMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DAOrderBookMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* Arena::CreateMaybeMessage< ::da::marketdata::v1::DATopOfBookAndLastTradeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DATopOfBookAndLastTradeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DATradeStatisticsMessage* Arena::CreateMaybeMessage< ::da::marketdata::v1::DATradeStatisticsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DATradeStatisticsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DAStatusMessage* Arena::CreateMaybeMessage< ::da::marketdata::v1::DAStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DAStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DABBMessage* Arena::CreateMaybeMessage< ::da::marketdata::v1::DABBMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DABBMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::da::marketdata::v1::DAHeartbeatMessage* Arena::CreateMaybeMessage< ::da::marketdata::v1::DAHeartbeatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::da::marketdata::v1::DAHeartbeatMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
