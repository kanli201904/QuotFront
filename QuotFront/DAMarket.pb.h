// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DAMarket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DAMarket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DAMarket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DAMarket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DAMarket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DAMarket_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_DAMarket_2eproto_metadata_getter(int index);
namespace DAMarket {
class Market;
struct MarketDefaultTypeInternal;
extern MarketDefaultTypeInternal _Market_default_instance_;
class Market_Data;
struct Market_DataDefaultTypeInternal;
extern Market_DataDefaultTypeInternal _Market_Data_default_instance_;
class Market_Deal;
struct Market_DealDefaultTypeInternal;
extern Market_DealDefaultTypeInternal _Market_Deal_default_instance_;
class Market_Depth;
struct Market_DepthDefaultTypeInternal;
extern Market_DepthDefaultTypeInternal _Market_Depth_default_instance_;
class Market_Head;
struct Market_HeadDefaultTypeInternal;
extern Market_HeadDefaultTypeInternal _Market_Head_default_instance_;
class Market_HeartBeat;
struct Market_HeartBeatDefaultTypeInternal;
extern Market_HeartBeatDefaultTypeInternal _Market_HeartBeat_default_instance_;
class Market_PriceData;
struct Market_PriceDataDefaultTypeInternal;
extern Market_PriceDataDefaultTypeInternal _Market_PriceData_default_instance_;
}  // namespace DAMarket
PROTOBUF_NAMESPACE_OPEN
template<> ::DAMarket::Market* Arena::CreateMaybeMessage<::DAMarket::Market>(Arena*);
template<> ::DAMarket::Market_Data* Arena::CreateMaybeMessage<::DAMarket::Market_Data>(Arena*);
template<> ::DAMarket::Market_Deal* Arena::CreateMaybeMessage<::DAMarket::Market_Deal>(Arena*);
template<> ::DAMarket::Market_Depth* Arena::CreateMaybeMessage<::DAMarket::Market_Depth>(Arena*);
template<> ::DAMarket::Market_Head* Arena::CreateMaybeMessage<::DAMarket::Market_Head>(Arena*);
template<> ::DAMarket::Market_HeartBeat* Arena::CreateMaybeMessage<::DAMarket::Market_HeartBeat>(Arena*);
template<> ::DAMarket::Market_PriceData* Arena::CreateMaybeMessage<::DAMarket::Market_PriceData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DAMarket {

enum Market_MsgType : int {
  Market_MsgType_HEART_BEAT = 0,
  Market_MsgType_REAL_DATA = 1,
  Market_MsgType_DEAL_DATA = 2,
  Market_MsgType_Market_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Market_MsgType_Market_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Market_MsgType_IsValid(int value);
constexpr Market_MsgType Market_MsgType_MsgType_MIN = Market_MsgType_HEART_BEAT;
constexpr Market_MsgType Market_MsgType_MsgType_MAX = Market_MsgType_DEAL_DATA;
constexpr int Market_MsgType_MsgType_ARRAYSIZE = Market_MsgType_MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_MsgType_descriptor();
template<typename T>
inline const std::string& Market_MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Market_MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Market_MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Market_MsgType_descriptor(), enum_t_value);
}
inline bool Market_MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Market_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Market_MsgType>(
    Market_MsgType_descriptor(), name, value);
}
enum Market_ExchangeID : int {
  Market_ExchangeID_EX_NONE = 0,
  Market_ExchangeID_EX_HKEX = 1,
  Market_ExchangeID_EX_SGX = 2,
  Market_ExchangeID_EX_NASD = 3,
  Market_ExchangeID_EX_NYEX = 4,
  Market_ExchangeID_EX_CME = 5,
  Market_ExchangeID_EX_SH = 6,
  Market_ExchangeID_EX_SZ = 7,
  Market_ExchangeID_EX_SHFE = 8,
  Market_ExchangeID_EX_CFFEX = 9,
  Market_ExchangeID_EX_DCE = 10,
  Market_ExchangeID_EX_CZCE = 11,
  Market_ExchangeID_EX_INE = 12,
  Market_ExchangeID_Market_ExchangeID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Market_ExchangeID_Market_ExchangeID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Market_ExchangeID_IsValid(int value);
constexpr Market_ExchangeID Market_ExchangeID_ExchangeID_MIN = Market_ExchangeID_EX_NONE;
constexpr Market_ExchangeID Market_ExchangeID_ExchangeID_MAX = Market_ExchangeID_EX_INE;
constexpr int Market_ExchangeID_ExchangeID_ARRAYSIZE = Market_ExchangeID_ExchangeID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_ExchangeID_descriptor();
template<typename T>
inline const std::string& Market_ExchangeID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Market_ExchangeID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Market_ExchangeID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Market_ExchangeID_descriptor(), enum_t_value);
}
inline bool Market_ExchangeID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Market_ExchangeID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Market_ExchangeID>(
    Market_ExchangeID_descriptor(), name, value);
}
enum Market_MarketStatus : int {
  Market_MarketStatus_NOT_TRADING = 0,
  Market_MarketStatus_PREO = 1,
  Market_MarketStatus_TRADING = 2,
  Market_MarketStatus_POST = 3,
  Market_MarketStatus_Market_MarketStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Market_MarketStatus_Market_MarketStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Market_MarketStatus_IsValid(int value);
constexpr Market_MarketStatus Market_MarketStatus_MarketStatus_MIN = Market_MarketStatus_NOT_TRADING;
constexpr Market_MarketStatus Market_MarketStatus_MarketStatus_MAX = Market_MarketStatus_POST;
constexpr int Market_MarketStatus_MarketStatus_ARRAYSIZE = Market_MarketStatus_MarketStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Market_MarketStatus_descriptor();
template<typename T>
inline const std::string& Market_MarketStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Market_MarketStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Market_MarketStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Market_MarketStatus_descriptor(), enum_t_value);
}
inline bool Market_MarketStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Market_MarketStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Market_MarketStatus>(
    Market_MarketStatus_descriptor(), name, value);
}
// ===================================================================

class Market_Head PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DAMarket.Market.Head) */ {
 public:
  inline Market_Head() : Market_Head(nullptr) {}
  virtual ~Market_Head();
  explicit constexpr Market_Head(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Market_Head(const Market_Head& from);
  Market_Head(Market_Head&& from) noexcept
    : Market_Head() {
    *this = ::std::move(from);
  }

  inline Market_Head& operator=(const Market_Head& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market_Head& operator=(Market_Head&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market_Head& default_instance() {
    return *internal_default_instance();
  }
  static inline const Market_Head* internal_default_instance() {
    return reinterpret_cast<const Market_Head*>(
               &_Market_Head_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Market_Head& a, Market_Head& b) {
    a.Swap(&b);
  }
  inline void Swap(Market_Head* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market_Head* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market_Head* New() const final {
    return CreateMaybeMessage<Market_Head>(nullptr);
  }

  Market_Head* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market_Head>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market_Head& from);
  void MergeFrom(const Market_Head& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market_Head* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DAMarket.Market.Head";
  }
  protected:
  explicit Market_Head(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DAMarket_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kTypeFieldNumber = 2,
    kExchangeFieldNumber = 3,
    kInstrumentFieldNumber = 4,
    kSequenceFieldNumber = 5,
    kLatencyFieldNumber = 6,
    kSourceFieldNumber = 7,
    kBitmapFieldNumber = 8,
    kLengthFieldNumber = 9,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .DAMarket.Market.MsgType type = 2;
  void clear_type();
  ::DAMarket::Market_MsgType type() const;
  void set_type(::DAMarket::Market_MsgType value);
  private:
  ::DAMarket::Market_MsgType _internal_type() const;
  void _internal_set_type(::DAMarket::Market_MsgType value);
  public:

  // .DAMarket.Market.ExchangeID exchange = 3;
  void clear_exchange();
  ::DAMarket::Market_ExchangeID exchange() const;
  void set_exchange(::DAMarket::Market_ExchangeID value);
  private:
  ::DAMarket::Market_ExchangeID _internal_exchange() const;
  void _internal_set_exchange(::DAMarket::Market_ExchangeID value);
  public:

  // uint32 instrument = 4;
  void clear_instrument();
  ::PROTOBUF_NAMESPACE_ID::uint32 instrument() const;
  void set_instrument(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instrument() const;
  void _internal_set_instrument(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sequence = 5;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 latency = 6;
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 source = 7;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::uint32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bitmap = 8;
  void clear_bitmap();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitmap() const;
  void set_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bitmap() const;
  void _internal_set_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 length = 9;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DAMarket.Market.Head)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int type_;
  int exchange_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instrument_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitmap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DAMarket_2eproto;
};
// -------------------------------------------------------------------

class Market_PriceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DAMarket.Market.PriceData) */ {
 public:
  inline Market_PriceData() : Market_PriceData(nullptr) {}
  virtual ~Market_PriceData();
  explicit constexpr Market_PriceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Market_PriceData(const Market_PriceData& from);
  Market_PriceData(Market_PriceData&& from) noexcept
    : Market_PriceData() {
    *this = ::std::move(from);
  }

  inline Market_PriceData& operator=(const Market_PriceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market_PriceData& operator=(Market_PriceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market_PriceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Market_PriceData* internal_default_instance() {
    return reinterpret_cast<const Market_PriceData*>(
               &_Market_PriceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Market_PriceData& a, Market_PriceData& b) {
    a.Swap(&b);
  }
  inline void Swap(Market_PriceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market_PriceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market_PriceData* New() const final {
    return CreateMaybeMessage<Market_PriceData>(nullptr);
  }

  Market_PriceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market_PriceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market_PriceData& from);
  void MergeFrom(const Market_PriceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market_PriceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DAMarket.Market.PriceData";
  }
  protected:
  explicit Market_PriceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DAMarket_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 7,
  };
  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // uint32 volume = 7;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DAMarket.Market.PriceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DAMarket_2eproto;
};
// -------------------------------------------------------------------

class Market_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DAMarket.Market.Data) */ {
 public:
  inline Market_Data() : Market_Data(nullptr) {}
  virtual ~Market_Data();
  explicit constexpr Market_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Market_Data(const Market_Data& from);
  Market_Data(Market_Data&& from) noexcept
    : Market_Data() {
    *this = ::std::move(from);
  }

  inline Market_Data& operator=(const Market_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market_Data& operator=(Market_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Market_Data* internal_default_instance() {
    return reinterpret_cast<const Market_Data*>(
               &_Market_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Market_Data& a, Market_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Market_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market_Data* New() const final {
    return CreateMaybeMessage<Market_Data>(nullptr);
  }

  Market_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market_Data& from);
  void MergeFrom(const Market_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DAMarket.Market.Data";
  }
  protected:
  explicit Market_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DAMarket_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPriceFieldNumber = 1,
    kVolumeFieldNumber = 3,
    kTurnoverFieldNumber = 4,
    kCurrentVolumeFieldNumber = 2,
    kBuy1VolumeFieldNumber = 7,
    kBuy1PriceFieldNumber = 5,
    kSell1PriceFieldNumber = 6,
    kMaxPriceFieldNumber = 9,
    kMinPriceFieldNumber = 10,
    kOpenPriceFieldNumber = 11,
    kClosePriceFieldNumber = 12,
    kHighLimitFieldNumber = 13,
    kLowLimitFieldNumber = 14,
    kSell1VolumeFieldNumber = 8,
    kMarketStatusFieldNumber = 21,
    kOpenInterestFieldNumber = 15,
    kSettlePriceFieldNumber = 16,
    kPreCloseFieldNumber = 17,
    kPreSettleFieldNumber = 18,
    kPreoPriceFieldNumber = 19,
    kPostPriceFieldNumber = 20,
  };
  // double current_price = 1;
  void clear_current_price();
  double current_price() const;
  void set_current_price(double value);
  private:
  double _internal_current_price() const;
  void _internal_set_current_price(double value);
  public:

  // uint64 volume = 3;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 turnover = 4;
  void clear_turnover();
  ::PROTOBUF_NAMESPACE_ID::uint64 turnover() const;
  void set_turnover(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_turnover() const;
  void _internal_set_turnover(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 current_volume = 2;
  void clear_current_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_volume() const;
  void set_current_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_volume() const;
  void _internal_set_current_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 buy_1_volume = 7;
  void clear_buy_1_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 buy_1_volume() const;
  void set_buy_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buy_1_volume() const;
  void _internal_set_buy_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double buy_1_price = 5;
  void clear_buy_1_price();
  double buy_1_price() const;
  void set_buy_1_price(double value);
  private:
  double _internal_buy_1_price() const;
  void _internal_set_buy_1_price(double value);
  public:

  // double sell_1_price = 6;
  void clear_sell_1_price();
  double sell_1_price() const;
  void set_sell_1_price(double value);
  private:
  double _internal_sell_1_price() const;
  void _internal_set_sell_1_price(double value);
  public:

  // double max_price = 9;
  void clear_max_price();
  double max_price() const;
  void set_max_price(double value);
  private:
  double _internal_max_price() const;
  void _internal_set_max_price(double value);
  public:

  // double min_price = 10;
  void clear_min_price();
  double min_price() const;
  void set_min_price(double value);
  private:
  double _internal_min_price() const;
  void _internal_set_min_price(double value);
  public:

  // double open_price = 11;
  void clear_open_price();
  double open_price() const;
  void set_open_price(double value);
  private:
  double _internal_open_price() const;
  void _internal_set_open_price(double value);
  public:

  // double close_price = 12;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // double high_limit = 13;
  void clear_high_limit();
  double high_limit() const;
  void set_high_limit(double value);
  private:
  double _internal_high_limit() const;
  void _internal_set_high_limit(double value);
  public:

  // double low_limit = 14;
  void clear_low_limit();
  double low_limit() const;
  void set_low_limit(double value);
  private:
  double _internal_low_limit() const;
  void _internal_set_low_limit(double value);
  public:

  // uint32 sell_1_volume = 8;
  void clear_sell_1_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 sell_1_volume() const;
  void set_sell_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sell_1_volume() const;
  void _internal_set_sell_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .DAMarket.Market.MarketStatus market_status = 21;
  void clear_market_status();
  ::DAMarket::Market_MarketStatus market_status() const;
  void set_market_status(::DAMarket::Market_MarketStatus value);
  private:
  ::DAMarket::Market_MarketStatus _internal_market_status() const;
  void _internal_set_market_status(::DAMarket::Market_MarketStatus value);
  public:

  // uint64 open_interest = 15;
  void clear_open_interest();
  ::PROTOBUF_NAMESPACE_ID::uint64 open_interest() const;
  void set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open_interest() const;
  void _internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double settle_price = 16;
  void clear_settle_price();
  double settle_price() const;
  void set_settle_price(double value);
  private:
  double _internal_settle_price() const;
  void _internal_set_settle_price(double value);
  public:

  // double pre_close = 17;
  void clear_pre_close();
  double pre_close() const;
  void set_pre_close(double value);
  private:
  double _internal_pre_close() const;
  void _internal_set_pre_close(double value);
  public:

  // double pre_settle = 18;
  void clear_pre_settle();
  double pre_settle() const;
  void set_pre_settle(double value);
  private:
  double _internal_pre_settle() const;
  void _internal_set_pre_settle(double value);
  public:

  // double preo_price = 19;
  void clear_preo_price();
  double preo_price() const;
  void set_preo_price(double value);
  private:
  double _internal_preo_price() const;
  void _internal_set_preo_price(double value);
  public:

  // double post_price = 20;
  void clear_post_price();
  double post_price() const;
  void set_post_price(double value);
  private:
  double _internal_post_price() const;
  void _internal_set_post_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:DAMarket.Market.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double current_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 turnover_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buy_1_volume_;
  double buy_1_price_;
  double sell_1_price_;
  double max_price_;
  double min_price_;
  double open_price_;
  double close_price_;
  double high_limit_;
  double low_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sell_1_volume_;
  int market_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_interest_;
  double settle_price_;
  double pre_close_;
  double pre_settle_;
  double preo_price_;
  double post_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DAMarket_2eproto;
};
// -------------------------------------------------------------------

class Market_Depth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DAMarket.Market.Depth) */ {
 public:
  inline Market_Depth() : Market_Depth(nullptr) {}
  virtual ~Market_Depth();
  explicit constexpr Market_Depth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Market_Depth(const Market_Depth& from);
  Market_Depth(Market_Depth&& from) noexcept
    : Market_Depth() {
    *this = ::std::move(from);
  }

  inline Market_Depth& operator=(const Market_Depth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market_Depth& operator=(Market_Depth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market_Depth& default_instance() {
    return *internal_default_instance();
  }
  static inline const Market_Depth* internal_default_instance() {
    return reinterpret_cast<const Market_Depth*>(
               &_Market_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Market_Depth& a, Market_Depth& b) {
    a.Swap(&b);
  }
  inline void Swap(Market_Depth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market_Depth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market_Depth* New() const final {
    return CreateMaybeMessage<Market_Depth>(nullptr);
  }

  Market_Depth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market_Depth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market_Depth& from);
  void MergeFrom(const Market_Depth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market_Depth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DAMarket.Market.Depth";
  }
  protected:
  explicit Market_Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DAMarket_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidsFieldNumber = 1,
    kAsksFieldNumber = 2,
  };
  // repeated .DAMarket.Market.PriceData Bids = 1;
  int bids_size() const;
  private:
  int _internal_bids_size() const;
  public:
  void clear_bids();
  ::DAMarket::Market_PriceData* mutable_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >*
      mutable_bids();
  private:
  const ::DAMarket::Market_PriceData& _internal_bids(int index) const;
  ::DAMarket::Market_PriceData* _internal_add_bids();
  public:
  const ::DAMarket::Market_PriceData& bids(int index) const;
  ::DAMarket::Market_PriceData* add_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >&
      bids() const;

  // repeated .DAMarket.Market.PriceData Asks = 2;
  int asks_size() const;
  private:
  int _internal_asks_size() const;
  public:
  void clear_asks();
  ::DAMarket::Market_PriceData* mutable_asks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >*
      mutable_asks();
  private:
  const ::DAMarket::Market_PriceData& _internal_asks(int index) const;
  ::DAMarket::Market_PriceData* _internal_add_asks();
  public:
  const ::DAMarket::Market_PriceData& asks(int index) const;
  ::DAMarket::Market_PriceData* add_asks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >&
      asks() const;

  // @@protoc_insertion_point(class_scope:DAMarket.Market.Depth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData > bids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData > asks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DAMarket_2eproto;
};
// -------------------------------------------------------------------

class Market_Deal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DAMarket.Market.Deal) */ {
 public:
  inline Market_Deal() : Market_Deal(nullptr) {}
  virtual ~Market_Deal();
  explicit constexpr Market_Deal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Market_Deal(const Market_Deal& from);
  Market_Deal(Market_Deal&& from) noexcept
    : Market_Deal() {
    *this = ::std::move(from);
  }

  inline Market_Deal& operator=(const Market_Deal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market_Deal& operator=(Market_Deal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market_Deal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Market_Deal* internal_default_instance() {
    return reinterpret_cast<const Market_Deal*>(
               &_Market_Deal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Market_Deal& a, Market_Deal& b) {
    a.Swap(&b);
  }
  inline void Swap(Market_Deal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market_Deal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market_Deal* New() const final {
    return CreateMaybeMessage<Market_Deal>(nullptr);
  }

  Market_Deal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market_Deal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market_Deal& from);
  void MergeFrom(const Market_Deal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market_Deal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DAMarket.Market.Deal";
  }
  protected:
  explicit Market_Deal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DAMarket_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDealPriceFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kDealVolumeFieldNumber = 2,
  };
  // double deal_price = 1;
  void clear_deal_price();
  double deal_price() const;
  void set_deal_price(double value);
  private:
  double _internal_deal_price() const;
  void _internal_set_deal_price(double value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 deal_volume = 2;
  void clear_deal_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 deal_volume() const;
  void set_deal_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deal_volume() const;
  void _internal_set_deal_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DAMarket.Market.Deal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double deal_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deal_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DAMarket_2eproto;
};
// -------------------------------------------------------------------

class Market_HeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DAMarket.Market.HeartBeat) */ {
 public:
  inline Market_HeartBeat() : Market_HeartBeat(nullptr) {}
  virtual ~Market_HeartBeat();
  explicit constexpr Market_HeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Market_HeartBeat(const Market_HeartBeat& from);
  Market_HeartBeat(Market_HeartBeat&& from) noexcept
    : Market_HeartBeat() {
    *this = ::std::move(from);
  }

  inline Market_HeartBeat& operator=(const Market_HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market_HeartBeat& operator=(Market_HeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market_HeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Market_HeartBeat* internal_default_instance() {
    return reinterpret_cast<const Market_HeartBeat*>(
               &_Market_HeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Market_HeartBeat& a, Market_HeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Market_HeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market_HeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market_HeartBeat* New() const final {
    return CreateMaybeMessage<Market_HeartBeat>(nullptr);
  }

  Market_HeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market_HeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market_HeartBeat& from);
  void MergeFrom(const Market_HeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market_HeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DAMarket.Market.HeartBeat";
  }
  protected:
  explicit Market_HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DAMarket_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DAMarket.Market.HeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DAMarket_2eproto;
};
// -------------------------------------------------------------------

class Market PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DAMarket.Market) */ {
 public:
  inline Market() : Market(nullptr) {}
  virtual ~Market();
  explicit constexpr Market(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Market(const Market& from);
  Market(Market&& from) noexcept
    : Market() {
    *this = ::std::move(from);
  }

  inline Market& operator=(const Market& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market& operator=(Market&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market& default_instance() {
    return *internal_default_instance();
  }
  static inline const Market* internal_default_instance() {
    return reinterpret_cast<const Market*>(
               &_Market_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Market& a, Market& b) {
    a.Swap(&b);
  }
  inline void Swap(Market* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market* New() const final {
    return CreateMaybeMessage<Market>(nullptr);
  }

  Market* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market& from);
  void MergeFrom(const Market& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DAMarket.Market";
  }
  protected:
  explicit Market(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DAMarket_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Market_Head Head;
  typedef Market_PriceData PriceData;
  typedef Market_Data Data;
  typedef Market_Depth Depth;
  typedef Market_Deal Deal;
  typedef Market_HeartBeat HeartBeat;

  typedef Market_MsgType MsgType;
  static constexpr MsgType HEART_BEAT =
    Market_MsgType_HEART_BEAT;
  static constexpr MsgType REAL_DATA =
    Market_MsgType_REAL_DATA;
  static constexpr MsgType DEAL_DATA =
    Market_MsgType_DEAL_DATA;
  static inline bool MsgType_IsValid(int value) {
    return Market_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN =
    Market_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX =
    Market_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE =
    Market_MsgType_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgType_descriptor() {
    return Market_MsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgType_Name.");
    return Market_MsgType_Name(enum_t_value);
  }
  static inline bool MsgType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgType* value) {
    return Market_MsgType_Parse(name, value);
  }

  typedef Market_ExchangeID ExchangeID;
  static constexpr ExchangeID EX_NONE =
    Market_ExchangeID_EX_NONE;
  static constexpr ExchangeID EX_HKEX =
    Market_ExchangeID_EX_HKEX;
  static constexpr ExchangeID EX_SGX =
    Market_ExchangeID_EX_SGX;
  static constexpr ExchangeID EX_NASD =
    Market_ExchangeID_EX_NASD;
  static constexpr ExchangeID EX_NYEX =
    Market_ExchangeID_EX_NYEX;
  static constexpr ExchangeID EX_CME =
    Market_ExchangeID_EX_CME;
  static constexpr ExchangeID EX_SH =
    Market_ExchangeID_EX_SH;
  static constexpr ExchangeID EX_SZ =
    Market_ExchangeID_EX_SZ;
  static constexpr ExchangeID EX_SHFE =
    Market_ExchangeID_EX_SHFE;
  static constexpr ExchangeID EX_CFFEX =
    Market_ExchangeID_EX_CFFEX;
  static constexpr ExchangeID EX_DCE =
    Market_ExchangeID_EX_DCE;
  static constexpr ExchangeID EX_CZCE =
    Market_ExchangeID_EX_CZCE;
  static constexpr ExchangeID EX_INE =
    Market_ExchangeID_EX_INE;
  static inline bool ExchangeID_IsValid(int value) {
    return Market_ExchangeID_IsValid(value);
  }
  static constexpr ExchangeID ExchangeID_MIN =
    Market_ExchangeID_ExchangeID_MIN;
  static constexpr ExchangeID ExchangeID_MAX =
    Market_ExchangeID_ExchangeID_MAX;
  static constexpr int ExchangeID_ARRAYSIZE =
    Market_ExchangeID_ExchangeID_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExchangeID_descriptor() {
    return Market_ExchangeID_descriptor();
  }
  template<typename T>
  static inline const std::string& ExchangeID_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExchangeID>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExchangeID_Name.");
    return Market_ExchangeID_Name(enum_t_value);
  }
  static inline bool ExchangeID_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExchangeID* value) {
    return Market_ExchangeID_Parse(name, value);
  }

  typedef Market_MarketStatus MarketStatus;
  static constexpr MarketStatus NOT_TRADING =
    Market_MarketStatus_NOT_TRADING;
  static constexpr MarketStatus PREO =
    Market_MarketStatus_PREO;
  static constexpr MarketStatus TRADING =
    Market_MarketStatus_TRADING;
  static constexpr MarketStatus POST =
    Market_MarketStatus_POST;
  static inline bool MarketStatus_IsValid(int value) {
    return Market_MarketStatus_IsValid(value);
  }
  static constexpr MarketStatus MarketStatus_MIN =
    Market_MarketStatus_MarketStatus_MIN;
  static constexpr MarketStatus MarketStatus_MAX =
    Market_MarketStatus_MarketStatus_MAX;
  static constexpr int MarketStatus_ARRAYSIZE =
    Market_MarketStatus_MarketStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MarketStatus_descriptor() {
    return Market_MarketStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& MarketStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MarketStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MarketStatus_Name.");
    return Market_MarketStatus_Name(enum_t_value);
  }
  static inline bool MarketStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MarketStatus* value) {
    return Market_MarketStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kDataFieldNumber = 2,
    kDepthFieldNumber = 3,
    kDealFieldNumber = 4,
    kHeartbeatFieldNumber = 5,
  };
  // .DAMarket.Market.Head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::DAMarket::Market_Head& head() const;
  ::DAMarket::Market_Head* release_head();
  ::DAMarket::Market_Head* mutable_head();
  void set_allocated_head(::DAMarket::Market_Head* head);
  private:
  const ::DAMarket::Market_Head& _internal_head() const;
  ::DAMarket::Market_Head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::DAMarket::Market_Head* head);
  ::DAMarket::Market_Head* unsafe_arena_release_head();

  // .DAMarket.Market.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DAMarket::Market_Data& data() const;
  ::DAMarket::Market_Data* release_data();
  ::DAMarket::Market_Data* mutable_data();
  void set_allocated_data(::DAMarket::Market_Data* data);
  private:
  const ::DAMarket::Market_Data& _internal_data() const;
  ::DAMarket::Market_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DAMarket::Market_Data* data);
  ::DAMarket::Market_Data* unsafe_arena_release_data();

  // .DAMarket.Market.Depth depth = 3;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  const ::DAMarket::Market_Depth& depth() const;
  ::DAMarket::Market_Depth* release_depth();
  ::DAMarket::Market_Depth* mutable_depth();
  void set_allocated_depth(::DAMarket::Market_Depth* depth);
  private:
  const ::DAMarket::Market_Depth& _internal_depth() const;
  ::DAMarket::Market_Depth* _internal_mutable_depth();
  public:
  void unsafe_arena_set_allocated_depth(
      ::DAMarket::Market_Depth* depth);
  ::DAMarket::Market_Depth* unsafe_arena_release_depth();

  // .DAMarket.Market.Deal deal = 4;
  bool has_deal() const;
  private:
  bool _internal_has_deal() const;
  public:
  void clear_deal();
  const ::DAMarket::Market_Deal& deal() const;
  ::DAMarket::Market_Deal* release_deal();
  ::DAMarket::Market_Deal* mutable_deal();
  void set_allocated_deal(::DAMarket::Market_Deal* deal);
  private:
  const ::DAMarket::Market_Deal& _internal_deal() const;
  ::DAMarket::Market_Deal* _internal_mutable_deal();
  public:
  void unsafe_arena_set_allocated_deal(
      ::DAMarket::Market_Deal* deal);
  ::DAMarket::Market_Deal* unsafe_arena_release_deal();

  // .DAMarket.Market.HeartBeat heartbeat = 5;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::DAMarket::Market_HeartBeat& heartbeat() const;
  ::DAMarket::Market_HeartBeat* release_heartbeat();
  ::DAMarket::Market_HeartBeat* mutable_heartbeat();
  void set_allocated_heartbeat(::DAMarket::Market_HeartBeat* heartbeat);
  private:
  const ::DAMarket::Market_HeartBeat& _internal_heartbeat() const;
  ::DAMarket::Market_HeartBeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::DAMarket::Market_HeartBeat* heartbeat);
  ::DAMarket::Market_HeartBeat* unsafe_arena_release_heartbeat();

  // @@protoc_insertion_point(class_scope:DAMarket.Market)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DAMarket::Market_Head* head_;
  ::DAMarket::Market_Data* data_;
  ::DAMarket::Market_Depth* depth_;
  ::DAMarket::Market_Deal* deal_;
  ::DAMarket::Market_HeartBeat* heartbeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DAMarket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Market_Head

// uint64 timestamp = 1;
inline void Market_Head::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Head::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Head::timestamp() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.timestamp)
  return _internal_timestamp();
}
inline void Market_Head::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Market_Head::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.timestamp)
}

// .DAMarket.Market.MsgType type = 2;
inline void Market_Head::clear_type() {
  type_ = 0;
}
inline ::DAMarket::Market_MsgType Market_Head::_internal_type() const {
  return static_cast< ::DAMarket::Market_MsgType >(type_);
}
inline ::DAMarket::Market_MsgType Market_Head::type() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.type)
  return _internal_type();
}
inline void Market_Head::_internal_set_type(::DAMarket::Market_MsgType value) {
  
  type_ = value;
}
inline void Market_Head::set_type(::DAMarket::Market_MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.type)
}

// .DAMarket.Market.ExchangeID exchange = 3;
inline void Market_Head::clear_exchange() {
  exchange_ = 0;
}
inline ::DAMarket::Market_ExchangeID Market_Head::_internal_exchange() const {
  return static_cast< ::DAMarket::Market_ExchangeID >(exchange_);
}
inline ::DAMarket::Market_ExchangeID Market_Head::exchange() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.exchange)
  return _internal_exchange();
}
inline void Market_Head::_internal_set_exchange(::DAMarket::Market_ExchangeID value) {
  
  exchange_ = value;
}
inline void Market_Head::set_exchange(::DAMarket::Market_ExchangeID value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.exchange)
}

// uint32 instrument = 4;
inline void Market_Head::clear_instrument() {
  instrument_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::_internal_instrument() const {
  return instrument_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::instrument() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.instrument)
  return _internal_instrument();
}
inline void Market_Head::_internal_set_instrument(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instrument_ = value;
}
inline void Market_Head::set_instrument(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instrument(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.instrument)
}

// uint32 sequence = 5;
inline void Market_Head::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::sequence() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.sequence)
  return _internal_sequence();
}
inline void Market_Head::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void Market_Head::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.sequence)
}

// uint32 latency = 6;
inline void Market_Head::clear_latency() {
  latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::latency() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.latency)
  return _internal_latency();
}
inline void Market_Head::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latency_ = value;
}
inline void Market_Head::set_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.latency)
}

// uint32 source = 7;
inline void Market_Head::clear_source() {
  source_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::source() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.source)
  return _internal_source();
}
inline void Market_Head::_internal_set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  source_ = value;
}
inline void Market_Head::set_source(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.source)
}

// uint32 bitmap = 8;
inline void Market_Head::clear_bitmap() {
  bitmap_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::_internal_bitmap() const {
  return bitmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::bitmap() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.bitmap)
  return _internal_bitmap();
}
inline void Market_Head::_internal_set_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bitmap_ = value;
}
inline void Market_Head::set_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bitmap(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.bitmap)
}

// uint32 length = 9;
inline void Market_Head::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Head::length() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Head.length)
  return _internal_length();
}
inline void Market_Head::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void Market_Head::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Head.length)
}

// -------------------------------------------------------------------

// Market_PriceData

// double price = 1;
inline void Market_PriceData::clear_price() {
  price_ = 0;
}
inline double Market_PriceData::_internal_price() const {
  return price_;
}
inline double Market_PriceData::price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.PriceData.price)
  return _internal_price();
}
inline void Market_PriceData::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Market_PriceData::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.PriceData.price)
}

// uint32 volume = 7;
inline void Market_PriceData::clear_volume() {
  volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_PriceData::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_PriceData::volume() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.PriceData.volume)
  return _internal_volume();
}
inline void Market_PriceData::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  volume_ = value;
}
inline void Market_PriceData::set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.PriceData.volume)
}

// -------------------------------------------------------------------

// Market_Data

// double current_price = 1;
inline void Market_Data::clear_current_price() {
  current_price_ = 0;
}
inline double Market_Data::_internal_current_price() const {
  return current_price_;
}
inline double Market_Data::current_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.current_price)
  return _internal_current_price();
}
inline void Market_Data::_internal_set_current_price(double value) {
  
  current_price_ = value;
}
inline void Market_Data::set_current_price(double value) {
  _internal_set_current_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.current_price)
}

// uint32 current_volume = 2;
inline void Market_Data::clear_current_volume() {
  current_volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Data::_internal_current_volume() const {
  return current_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Data::current_volume() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.current_volume)
  return _internal_current_volume();
}
inline void Market_Data::_internal_set_current_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  current_volume_ = value;
}
inline void Market_Data::set_current_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_volume(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.current_volume)
}

// uint64 volume = 3;
inline void Market_Data::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Data::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Data::volume() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.volume)
  return _internal_volume();
}
inline void Market_Data::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volume_ = value;
}
inline void Market_Data::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.volume)
}

// uint64 turnover = 4;
inline void Market_Data::clear_turnover() {
  turnover_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Data::_internal_turnover() const {
  return turnover_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Data::turnover() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.turnover)
  return _internal_turnover();
}
inline void Market_Data::_internal_set_turnover(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  turnover_ = value;
}
inline void Market_Data::set_turnover(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.turnover)
}

// double buy_1_price = 5;
inline void Market_Data::clear_buy_1_price() {
  buy_1_price_ = 0;
}
inline double Market_Data::_internal_buy_1_price() const {
  return buy_1_price_;
}
inline double Market_Data::buy_1_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.buy_1_price)
  return _internal_buy_1_price();
}
inline void Market_Data::_internal_set_buy_1_price(double value) {
  
  buy_1_price_ = value;
}
inline void Market_Data::set_buy_1_price(double value) {
  _internal_set_buy_1_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.buy_1_price)
}

// double sell_1_price = 6;
inline void Market_Data::clear_sell_1_price() {
  sell_1_price_ = 0;
}
inline double Market_Data::_internal_sell_1_price() const {
  return sell_1_price_;
}
inline double Market_Data::sell_1_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.sell_1_price)
  return _internal_sell_1_price();
}
inline void Market_Data::_internal_set_sell_1_price(double value) {
  
  sell_1_price_ = value;
}
inline void Market_Data::set_sell_1_price(double value) {
  _internal_set_sell_1_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.sell_1_price)
}

// uint32 buy_1_volume = 7;
inline void Market_Data::clear_buy_1_volume() {
  buy_1_volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Data::_internal_buy_1_volume() const {
  return buy_1_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Data::buy_1_volume() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.buy_1_volume)
  return _internal_buy_1_volume();
}
inline void Market_Data::_internal_set_buy_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  buy_1_volume_ = value;
}
inline void Market_Data::set_buy_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buy_1_volume(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.buy_1_volume)
}

// uint32 sell_1_volume = 8;
inline void Market_Data::clear_sell_1_volume() {
  sell_1_volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Data::_internal_sell_1_volume() const {
  return sell_1_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Data::sell_1_volume() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.sell_1_volume)
  return _internal_sell_1_volume();
}
inline void Market_Data::_internal_set_sell_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sell_1_volume_ = value;
}
inline void Market_Data::set_sell_1_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sell_1_volume(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.sell_1_volume)
}

// double max_price = 9;
inline void Market_Data::clear_max_price() {
  max_price_ = 0;
}
inline double Market_Data::_internal_max_price() const {
  return max_price_;
}
inline double Market_Data::max_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.max_price)
  return _internal_max_price();
}
inline void Market_Data::_internal_set_max_price(double value) {
  
  max_price_ = value;
}
inline void Market_Data::set_max_price(double value) {
  _internal_set_max_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.max_price)
}

// double min_price = 10;
inline void Market_Data::clear_min_price() {
  min_price_ = 0;
}
inline double Market_Data::_internal_min_price() const {
  return min_price_;
}
inline double Market_Data::min_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.min_price)
  return _internal_min_price();
}
inline void Market_Data::_internal_set_min_price(double value) {
  
  min_price_ = value;
}
inline void Market_Data::set_min_price(double value) {
  _internal_set_min_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.min_price)
}

// double open_price = 11;
inline void Market_Data::clear_open_price() {
  open_price_ = 0;
}
inline double Market_Data::_internal_open_price() const {
  return open_price_;
}
inline double Market_Data::open_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.open_price)
  return _internal_open_price();
}
inline void Market_Data::_internal_set_open_price(double value) {
  
  open_price_ = value;
}
inline void Market_Data::set_open_price(double value) {
  _internal_set_open_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.open_price)
}

// double close_price = 12;
inline void Market_Data::clear_close_price() {
  close_price_ = 0;
}
inline double Market_Data::_internal_close_price() const {
  return close_price_;
}
inline double Market_Data::close_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.close_price)
  return _internal_close_price();
}
inline void Market_Data::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void Market_Data::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.close_price)
}

// double high_limit = 13;
inline void Market_Data::clear_high_limit() {
  high_limit_ = 0;
}
inline double Market_Data::_internal_high_limit() const {
  return high_limit_;
}
inline double Market_Data::high_limit() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.high_limit)
  return _internal_high_limit();
}
inline void Market_Data::_internal_set_high_limit(double value) {
  
  high_limit_ = value;
}
inline void Market_Data::set_high_limit(double value) {
  _internal_set_high_limit(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.high_limit)
}

// double low_limit = 14;
inline void Market_Data::clear_low_limit() {
  low_limit_ = 0;
}
inline double Market_Data::_internal_low_limit() const {
  return low_limit_;
}
inline double Market_Data::low_limit() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.low_limit)
  return _internal_low_limit();
}
inline void Market_Data::_internal_set_low_limit(double value) {
  
  low_limit_ = value;
}
inline void Market_Data::set_low_limit(double value) {
  _internal_set_low_limit(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.low_limit)
}

// uint64 open_interest = 15;
inline void Market_Data::clear_open_interest() {
  open_interest_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Data::_internal_open_interest() const {
  return open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Data::open_interest() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.open_interest)
  return _internal_open_interest();
}
inline void Market_Data::_internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_interest_ = value;
}
inline void Market_Data::set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.open_interest)
}

// double settle_price = 16;
inline void Market_Data::clear_settle_price() {
  settle_price_ = 0;
}
inline double Market_Data::_internal_settle_price() const {
  return settle_price_;
}
inline double Market_Data::settle_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.settle_price)
  return _internal_settle_price();
}
inline void Market_Data::_internal_set_settle_price(double value) {
  
  settle_price_ = value;
}
inline void Market_Data::set_settle_price(double value) {
  _internal_set_settle_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.settle_price)
}

// double pre_close = 17;
inline void Market_Data::clear_pre_close() {
  pre_close_ = 0;
}
inline double Market_Data::_internal_pre_close() const {
  return pre_close_;
}
inline double Market_Data::pre_close() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.pre_close)
  return _internal_pre_close();
}
inline void Market_Data::_internal_set_pre_close(double value) {
  
  pre_close_ = value;
}
inline void Market_Data::set_pre_close(double value) {
  _internal_set_pre_close(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.pre_close)
}

// double pre_settle = 18;
inline void Market_Data::clear_pre_settle() {
  pre_settle_ = 0;
}
inline double Market_Data::_internal_pre_settle() const {
  return pre_settle_;
}
inline double Market_Data::pre_settle() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.pre_settle)
  return _internal_pre_settle();
}
inline void Market_Data::_internal_set_pre_settle(double value) {
  
  pre_settle_ = value;
}
inline void Market_Data::set_pre_settle(double value) {
  _internal_set_pre_settle(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.pre_settle)
}

// double preo_price = 19;
inline void Market_Data::clear_preo_price() {
  preo_price_ = 0;
}
inline double Market_Data::_internal_preo_price() const {
  return preo_price_;
}
inline double Market_Data::preo_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.preo_price)
  return _internal_preo_price();
}
inline void Market_Data::_internal_set_preo_price(double value) {
  
  preo_price_ = value;
}
inline void Market_Data::set_preo_price(double value) {
  _internal_set_preo_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.preo_price)
}

// double post_price = 20;
inline void Market_Data::clear_post_price() {
  post_price_ = 0;
}
inline double Market_Data::_internal_post_price() const {
  return post_price_;
}
inline double Market_Data::post_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.post_price)
  return _internal_post_price();
}
inline void Market_Data::_internal_set_post_price(double value) {
  
  post_price_ = value;
}
inline void Market_Data::set_post_price(double value) {
  _internal_set_post_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.post_price)
}

// .DAMarket.Market.MarketStatus market_status = 21;
inline void Market_Data::clear_market_status() {
  market_status_ = 0;
}
inline ::DAMarket::Market_MarketStatus Market_Data::_internal_market_status() const {
  return static_cast< ::DAMarket::Market_MarketStatus >(market_status_);
}
inline ::DAMarket::Market_MarketStatus Market_Data::market_status() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Data.market_status)
  return _internal_market_status();
}
inline void Market_Data::_internal_set_market_status(::DAMarket::Market_MarketStatus value) {
  
  market_status_ = value;
}
inline void Market_Data::set_market_status(::DAMarket::Market_MarketStatus value) {
  _internal_set_market_status(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Data.market_status)
}

// -------------------------------------------------------------------

// Market_Depth

// repeated .DAMarket.Market.PriceData Bids = 1;
inline int Market_Depth::_internal_bids_size() const {
  return bids_.size();
}
inline int Market_Depth::bids_size() const {
  return _internal_bids_size();
}
inline void Market_Depth::clear_bids() {
  bids_.Clear();
}
inline ::DAMarket::Market_PriceData* Market_Depth::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:DAMarket.Market.Depth.Bids)
  return bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >*
Market_Depth::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:DAMarket.Market.Depth.Bids)
  return &bids_;
}
inline const ::DAMarket::Market_PriceData& Market_Depth::_internal_bids(int index) const {
  return bids_.Get(index);
}
inline const ::DAMarket::Market_PriceData& Market_Depth::bids(int index) const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Depth.Bids)
  return _internal_bids(index);
}
inline ::DAMarket::Market_PriceData* Market_Depth::_internal_add_bids() {
  return bids_.Add();
}
inline ::DAMarket::Market_PriceData* Market_Depth::add_bids() {
  // @@protoc_insertion_point(field_add:DAMarket.Market.Depth.Bids)
  return _internal_add_bids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >&
Market_Depth::bids() const {
  // @@protoc_insertion_point(field_list:DAMarket.Market.Depth.Bids)
  return bids_;
}

// repeated .DAMarket.Market.PriceData Asks = 2;
inline int Market_Depth::_internal_asks_size() const {
  return asks_.size();
}
inline int Market_Depth::asks_size() const {
  return _internal_asks_size();
}
inline void Market_Depth::clear_asks() {
  asks_.Clear();
}
inline ::DAMarket::Market_PriceData* Market_Depth::mutable_asks(int index) {
  // @@protoc_insertion_point(field_mutable:DAMarket.Market.Depth.Asks)
  return asks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >*
Market_Depth::mutable_asks() {
  // @@protoc_insertion_point(field_mutable_list:DAMarket.Market.Depth.Asks)
  return &asks_;
}
inline const ::DAMarket::Market_PriceData& Market_Depth::_internal_asks(int index) const {
  return asks_.Get(index);
}
inline const ::DAMarket::Market_PriceData& Market_Depth::asks(int index) const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Depth.Asks)
  return _internal_asks(index);
}
inline ::DAMarket::Market_PriceData* Market_Depth::_internal_add_asks() {
  return asks_.Add();
}
inline ::DAMarket::Market_PriceData* Market_Depth::add_asks() {
  // @@protoc_insertion_point(field_add:DAMarket.Market.Depth.Asks)
  return _internal_add_asks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DAMarket::Market_PriceData >&
Market_Depth::asks() const {
  // @@protoc_insertion_point(field_list:DAMarket.Market.Depth.Asks)
  return asks_;
}

// -------------------------------------------------------------------

// Market_Deal

// double deal_price = 1;
inline void Market_Deal::clear_deal_price() {
  deal_price_ = 0;
}
inline double Market_Deal::_internal_deal_price() const {
  return deal_price_;
}
inline double Market_Deal::deal_price() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Deal.deal_price)
  return _internal_deal_price();
}
inline void Market_Deal::_internal_set_deal_price(double value) {
  
  deal_price_ = value;
}
inline void Market_Deal::set_deal_price(double value) {
  _internal_set_deal_price(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Deal.deal_price)
}

// uint32 deal_volume = 2;
inline void Market_Deal::clear_deal_volume() {
  deal_volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Deal::_internal_deal_volume() const {
  return deal_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Market_Deal::deal_volume() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Deal.deal_volume)
  return _internal_deal_volume();
}
inline void Market_Deal::_internal_set_deal_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  deal_volume_ = value;
}
inline void Market_Deal::set_deal_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deal_volume(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Deal.deal_volume)
}

// uint64 timestamp = 3;
inline void Market_Deal::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Deal::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_Deal::timestamp() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.Deal.timestamp)
  return _internal_timestamp();
}
inline void Market_Deal::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Market_Deal::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.Deal.timestamp)
}

// -------------------------------------------------------------------

// Market_HeartBeat

// uint64 timestamp = 1;
inline void Market_HeartBeat::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_HeartBeat::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Market_HeartBeat::timestamp() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.HeartBeat.timestamp)
  return _internal_timestamp();
}
inline void Market_HeartBeat::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Market_HeartBeat::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DAMarket.Market.HeartBeat.timestamp)
}

// -------------------------------------------------------------------

// Market

// .DAMarket.Market.Head head = 1;
inline bool Market::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool Market::has_head() const {
  return _internal_has_head();
}
inline void Market::clear_head() {
  if (GetArena() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::DAMarket::Market_Head& Market::_internal_head() const {
  const ::DAMarket::Market_Head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::DAMarket::Market_Head&>(
      ::DAMarket::_Market_Head_default_instance_);
}
inline const ::DAMarket::Market_Head& Market::head() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.head)
  return _internal_head();
}
inline void Market::unsafe_arena_set_allocated_head(
    ::DAMarket::Market_Head* head) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DAMarket.Market.head)
}
inline ::DAMarket::Market_Head* Market::release_head() {
  
  ::DAMarket::Market_Head* temp = head_;
  head_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DAMarket::Market_Head* Market::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:DAMarket.Market.head)
  
  ::DAMarket::Market_Head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::DAMarket::Market_Head* Market::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::DAMarket::Market_Head>(GetArena());
    head_ = p;
  }
  return head_;
}
inline ::DAMarket::Market_Head* Market::mutable_head() {
  // @@protoc_insertion_point(field_mutable:DAMarket.Market.head)
  return _internal_mutable_head();
}
inline void Market::set_allocated_head(::DAMarket::Market_Head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:DAMarket.Market.head)
}

// .DAMarket.Market.Data data = 2;
inline bool Market::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Market::has_data() const {
  return _internal_has_data();
}
inline void Market::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::DAMarket::Market_Data& Market::_internal_data() const {
  const ::DAMarket::Market_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::DAMarket::Market_Data&>(
      ::DAMarket::_Market_Data_default_instance_);
}
inline const ::DAMarket::Market_Data& Market::data() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.data)
  return _internal_data();
}
inline void Market::unsafe_arena_set_allocated_data(
    ::DAMarket::Market_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DAMarket.Market.data)
}
inline ::DAMarket::Market_Data* Market::release_data() {
  
  ::DAMarket::Market_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DAMarket::Market_Data* Market::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:DAMarket.Market.data)
  
  ::DAMarket::Market_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DAMarket::Market_Data* Market::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DAMarket::Market_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DAMarket::Market_Data* Market::mutable_data() {
  // @@protoc_insertion_point(field_mutable:DAMarket.Market.data)
  return _internal_mutable_data();
}
inline void Market::set_allocated_data(::DAMarket::Market_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:DAMarket.Market.data)
}

// .DAMarket.Market.Depth depth = 3;
inline bool Market::_internal_has_depth() const {
  return this != internal_default_instance() && depth_ != nullptr;
}
inline bool Market::has_depth() const {
  return _internal_has_depth();
}
inline void Market::clear_depth() {
  if (GetArena() == nullptr && depth_ != nullptr) {
    delete depth_;
  }
  depth_ = nullptr;
}
inline const ::DAMarket::Market_Depth& Market::_internal_depth() const {
  const ::DAMarket::Market_Depth* p = depth_;
  return p != nullptr ? *p : reinterpret_cast<const ::DAMarket::Market_Depth&>(
      ::DAMarket::_Market_Depth_default_instance_);
}
inline const ::DAMarket::Market_Depth& Market::depth() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.depth)
  return _internal_depth();
}
inline void Market::unsafe_arena_set_allocated_depth(
    ::DAMarket::Market_Depth* depth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(depth_);
  }
  depth_ = depth;
  if (depth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DAMarket.Market.depth)
}
inline ::DAMarket::Market_Depth* Market::release_depth() {
  
  ::DAMarket::Market_Depth* temp = depth_;
  depth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DAMarket::Market_Depth* Market::unsafe_arena_release_depth() {
  // @@protoc_insertion_point(field_release:DAMarket.Market.depth)
  
  ::DAMarket::Market_Depth* temp = depth_;
  depth_ = nullptr;
  return temp;
}
inline ::DAMarket::Market_Depth* Market::_internal_mutable_depth() {
  
  if (depth_ == nullptr) {
    auto* p = CreateMaybeMessage<::DAMarket::Market_Depth>(GetArena());
    depth_ = p;
  }
  return depth_;
}
inline ::DAMarket::Market_Depth* Market::mutable_depth() {
  // @@protoc_insertion_point(field_mutable:DAMarket.Market.depth)
  return _internal_mutable_depth();
}
inline void Market::set_allocated_depth(::DAMarket::Market_Depth* depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete depth_;
  }
  if (depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(depth);
    if (message_arena != submessage_arena) {
      depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth, submessage_arena);
    }
    
  } else {
    
  }
  depth_ = depth;
  // @@protoc_insertion_point(field_set_allocated:DAMarket.Market.depth)
}

// .DAMarket.Market.Deal deal = 4;
inline bool Market::_internal_has_deal() const {
  return this != internal_default_instance() && deal_ != nullptr;
}
inline bool Market::has_deal() const {
  return _internal_has_deal();
}
inline void Market::clear_deal() {
  if (GetArena() == nullptr && deal_ != nullptr) {
    delete deal_;
  }
  deal_ = nullptr;
}
inline const ::DAMarket::Market_Deal& Market::_internal_deal() const {
  const ::DAMarket::Market_Deal* p = deal_;
  return p != nullptr ? *p : reinterpret_cast<const ::DAMarket::Market_Deal&>(
      ::DAMarket::_Market_Deal_default_instance_);
}
inline const ::DAMarket::Market_Deal& Market::deal() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.deal)
  return _internal_deal();
}
inline void Market::unsafe_arena_set_allocated_deal(
    ::DAMarket::Market_Deal* deal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deal_);
  }
  deal_ = deal;
  if (deal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DAMarket.Market.deal)
}
inline ::DAMarket::Market_Deal* Market::release_deal() {
  
  ::DAMarket::Market_Deal* temp = deal_;
  deal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DAMarket::Market_Deal* Market::unsafe_arena_release_deal() {
  // @@protoc_insertion_point(field_release:DAMarket.Market.deal)
  
  ::DAMarket::Market_Deal* temp = deal_;
  deal_ = nullptr;
  return temp;
}
inline ::DAMarket::Market_Deal* Market::_internal_mutable_deal() {
  
  if (deal_ == nullptr) {
    auto* p = CreateMaybeMessage<::DAMarket::Market_Deal>(GetArena());
    deal_ = p;
  }
  return deal_;
}
inline ::DAMarket::Market_Deal* Market::mutable_deal() {
  // @@protoc_insertion_point(field_mutable:DAMarket.Market.deal)
  return _internal_mutable_deal();
}
inline void Market::set_allocated_deal(::DAMarket::Market_Deal* deal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deal_;
  }
  if (deal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deal);
    if (message_arena != submessage_arena) {
      deal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deal, submessage_arena);
    }
    
  } else {
    
  }
  deal_ = deal;
  // @@protoc_insertion_point(field_set_allocated:DAMarket.Market.deal)
}

// .DAMarket.Market.HeartBeat heartbeat = 5;
inline bool Market::_internal_has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != nullptr;
}
inline bool Market::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void Market::clear_heartbeat() {
  if (GetArena() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
}
inline const ::DAMarket::Market_HeartBeat& Market::_internal_heartbeat() const {
  const ::DAMarket::Market_HeartBeat* p = heartbeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::DAMarket::Market_HeartBeat&>(
      ::DAMarket::_Market_HeartBeat_default_instance_);
}
inline const ::DAMarket::Market_HeartBeat& Market::heartbeat() const {
  // @@protoc_insertion_point(field_get:DAMarket.Market.heartbeat)
  return _internal_heartbeat();
}
inline void Market::unsafe_arena_set_allocated_heartbeat(
    ::DAMarket::Market_HeartBeat* heartbeat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_);
  }
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DAMarket.Market.heartbeat)
}
inline ::DAMarket::Market_HeartBeat* Market::release_heartbeat() {
  
  ::DAMarket::Market_HeartBeat* temp = heartbeat_;
  heartbeat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DAMarket::Market_HeartBeat* Market::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_release:DAMarket.Market.heartbeat)
  
  ::DAMarket::Market_HeartBeat* temp = heartbeat_;
  heartbeat_ = nullptr;
  return temp;
}
inline ::DAMarket::Market_HeartBeat* Market::_internal_mutable_heartbeat() {
  
  if (heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::DAMarket::Market_HeartBeat>(GetArena());
    heartbeat_ = p;
  }
  return heartbeat_;
}
inline ::DAMarket::Market_HeartBeat* Market::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:DAMarket.Market.heartbeat)
  return _internal_mutable_heartbeat();
}
inline void Market::set_allocated_heartbeat(::DAMarket::Market_HeartBeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heartbeat_;
  }
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:DAMarket.Market.heartbeat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DAMarket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DAMarket::Market_MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAMarket::Market_MsgType>() {
  return ::DAMarket::Market_MsgType_descriptor();
}
template <> struct is_proto_enum< ::DAMarket::Market_ExchangeID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAMarket::Market_ExchangeID>() {
  return ::DAMarket::Market_ExchangeID_descriptor();
}
template <> struct is_proto_enum< ::DAMarket::Market_MarketStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DAMarket::Market_MarketStatus>() {
  return ::DAMarket::Market_MarketStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DAMarket_2eproto
