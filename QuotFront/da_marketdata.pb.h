// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: da_marketdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_da_5fmarketdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_da_5fmarketdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_da_5fmarketdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_da_5fmarketdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_da_5fmarketdata_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_da_5fmarketdata_2eproto_metadata_getter(int index);
namespace da {
namespace marketdata {
namespace v1 {
class DABBMessage;
struct DABBMessageDefaultTypeInternal;
extern DABBMessageDefaultTypeInternal _DABBMessage_default_instance_;
class DAHeartbeatMessage;
struct DAHeartbeatMessageDefaultTypeInternal;
extern DAHeartbeatMessageDefaultTypeInternal _DAHeartbeatMessage_default_instance_;
class DAMarketDataMessage;
struct DAMarketDataMessageDefaultTypeInternal;
extern DAMarketDataMessageDefaultTypeInternal _DAMarketDataMessage_default_instance_;
class DAMarketDataPacket;
struct DAMarketDataPacketDefaultTypeInternal;
extern DAMarketDataPacketDefaultTypeInternal _DAMarketDataPacket_default_instance_;
class DAOrderBookEntry;
struct DAOrderBookEntryDefaultTypeInternal;
extern DAOrderBookEntryDefaultTypeInternal _DAOrderBookEntry_default_instance_;
class DAOrderBookMessage;
struct DAOrderBookMessageDefaultTypeInternal;
extern DAOrderBookMessageDefaultTypeInternal _DAOrderBookMessage_default_instance_;
class DAStatusMessage;
struct DAStatusMessageDefaultTypeInternal;
extern DAStatusMessageDefaultTypeInternal _DAStatusMessage_default_instance_;
class DATopOfBookAndLastTradeMessage;
struct DATopOfBookAndLastTradeMessageDefaultTypeInternal;
extern DATopOfBookAndLastTradeMessageDefaultTypeInternal _DATopOfBookAndLastTradeMessage_default_instance_;
class DATradeStatisticsMessage;
struct DATradeStatisticsMessageDefaultTypeInternal;
extern DATradeStatisticsMessageDefaultTypeInternal _DATradeStatisticsMessage_default_instance_;
}  // namespace v1
}  // namespace marketdata
}  // namespace da
PROTOBUF_NAMESPACE_OPEN
template<> ::da::marketdata::v1::DABBMessage* Arena::CreateMaybeMessage<::da::marketdata::v1::DABBMessage>(Arena*);
template<> ::da::marketdata::v1::DAHeartbeatMessage* Arena::CreateMaybeMessage<::da::marketdata::v1::DAHeartbeatMessage>(Arena*);
template<> ::da::marketdata::v1::DAMarketDataMessage* Arena::CreateMaybeMessage<::da::marketdata::v1::DAMarketDataMessage>(Arena*);
template<> ::da::marketdata::v1::DAMarketDataPacket* Arena::CreateMaybeMessage<::da::marketdata::v1::DAMarketDataPacket>(Arena*);
template<> ::da::marketdata::v1::DAOrderBookEntry* Arena::CreateMaybeMessage<::da::marketdata::v1::DAOrderBookEntry>(Arena*);
template<> ::da::marketdata::v1::DAOrderBookMessage* Arena::CreateMaybeMessage<::da::marketdata::v1::DAOrderBookMessage>(Arena*);
template<> ::da::marketdata::v1::DAStatusMessage* Arena::CreateMaybeMessage<::da::marketdata::v1::DAStatusMessage>(Arena*);
template<> ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* Arena::CreateMaybeMessage<::da::marketdata::v1::DATopOfBookAndLastTradeMessage>(Arena*);
template<> ::da::marketdata::v1::DATradeStatisticsMessage* Arena::CreateMaybeMessage<::da::marketdata::v1::DATradeStatisticsMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace da {
namespace marketdata {
namespace v1 {

enum DAOrderBookMessage_BookType : int {
  DAOrderBookMessage_BookType_BOOK_TYPE_UNDEFINED = 0,
  DAOrderBookMessage_BookType_BOOK_TYPE_MARKET_BY_PRICE = 1,
  DAOrderBookMessage_BookType_BOOK_TYPE_MARKET_BY_ORDER = 2,
  DAOrderBookMessage_BookType_DAOrderBookMessage_BookType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DAOrderBookMessage_BookType_DAOrderBookMessage_BookType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DAOrderBookMessage_BookType_IsValid(int value);
constexpr DAOrderBookMessage_BookType DAOrderBookMessage_BookType_BookType_MIN = DAOrderBookMessage_BookType_BOOK_TYPE_UNDEFINED;
constexpr DAOrderBookMessage_BookType DAOrderBookMessage_BookType_BookType_MAX = DAOrderBookMessage_BookType_BOOK_TYPE_MARKET_BY_ORDER;
constexpr int DAOrderBookMessage_BookType_BookType_ARRAYSIZE = DAOrderBookMessage_BookType_BookType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAOrderBookMessage_BookType_descriptor();
template<typename T>
inline const std::string& DAOrderBookMessage_BookType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DAOrderBookMessage_BookType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DAOrderBookMessage_BookType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DAOrderBookMessage_BookType_descriptor(), enum_t_value);
}
inline bool DAOrderBookMessage_BookType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DAOrderBookMessage_BookType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DAOrderBookMessage_BookType>(
    DAOrderBookMessage_BookType_descriptor(), name, value);
}
enum DAStatusMessage_StatusType : int {
  DAStatusMessage_StatusType_STATUS_TYPE_UNDEFINED = 0,
  DAStatusMessage_StatusType_STATUS_TYPE_MARKET = 1,
  DAStatusMessage_StatusType_STATUS_TYPE_INSTRUMENT = 2,
  DAStatusMessage_StatusType_DAStatusMessage_StatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DAStatusMessage_StatusType_DAStatusMessage_StatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DAStatusMessage_StatusType_IsValid(int value);
constexpr DAStatusMessage_StatusType DAStatusMessage_StatusType_StatusType_MIN = DAStatusMessage_StatusType_STATUS_TYPE_UNDEFINED;
constexpr DAStatusMessage_StatusType DAStatusMessage_StatusType_StatusType_MAX = DAStatusMessage_StatusType_STATUS_TYPE_INSTRUMENT;
constexpr int DAStatusMessage_StatusType_StatusType_ARRAYSIZE = DAStatusMessage_StatusType_StatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAStatusMessage_StatusType_descriptor();
template<typename T>
inline const std::string& DAStatusMessage_StatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DAStatusMessage_StatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DAStatusMessage_StatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DAStatusMessage_StatusType_descriptor(), enum_t_value);
}
inline bool DAStatusMessage_StatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DAStatusMessage_StatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DAStatusMessage_StatusType>(
    DAStatusMessage_StatusType_descriptor(), name, value);
}
enum DAStatusMessage_TradeStatus : int {
  DAStatusMessage_TradeStatus_STATUS_NOT_TRADING = 0,
  DAStatusMessage_TradeStatus_STATUS_PREO = 1,
  DAStatusMessage_TradeStatus_STATUS_TRADING = 2,
  DAStatusMessage_TradeStatus_STATUS_POST = 3,
  DAStatusMessage_TradeStatus_DAStatusMessage_TradeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DAStatusMessage_TradeStatus_DAStatusMessage_TradeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DAStatusMessage_TradeStatus_IsValid(int value);
constexpr DAStatusMessage_TradeStatus DAStatusMessage_TradeStatus_TradeStatus_MIN = DAStatusMessage_TradeStatus_STATUS_NOT_TRADING;
constexpr DAStatusMessage_TradeStatus DAStatusMessage_TradeStatus_TradeStatus_MAX = DAStatusMessage_TradeStatus_STATUS_POST;
constexpr int DAStatusMessage_TradeStatus_TradeStatus_ARRAYSIZE = DAStatusMessage_TradeStatus_TradeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DAStatusMessage_TradeStatus_descriptor();
template<typename T>
inline const std::string& DAStatusMessage_TradeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DAStatusMessage_TradeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DAStatusMessage_TradeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DAStatusMessage_TradeStatus_descriptor(), enum_t_value);
}
inline bool DAStatusMessage_TradeStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DAStatusMessage_TradeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DAStatusMessage_TradeStatus>(
    DAStatusMessage_TradeStatus_descriptor(), name, value);
}
// ===================================================================

class DAMarketDataMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DAMarketDataMessage) */ {
 public:
  inline DAMarketDataMessage() : DAMarketDataMessage(nullptr) {}
  virtual ~DAMarketDataMessage();
  explicit constexpr DAMarketDataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAMarketDataMessage(const DAMarketDataMessage& from);
  DAMarketDataMessage(DAMarketDataMessage&& from) noexcept
    : DAMarketDataMessage() {
    *this = ::std::move(from);
  }

  inline DAMarketDataMessage& operator=(const DAMarketDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAMarketDataMessage& operator=(DAMarketDataMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DAMarketDataMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAMarketDataMessage* internal_default_instance() {
    return reinterpret_cast<const DAMarketDataMessage*>(
               &_DAMarketDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DAMarketDataMessage& a, DAMarketDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DAMarketDataMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAMarketDataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DAMarketDataMessage* New() const final {
    return CreateMaybeMessage<DAMarketDataMessage>(nullptr);
  }

  DAMarketDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DAMarketDataMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DAMarketDataMessage& from);
  void MergeFrom(const DAMarketDataMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAMarketDataMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DAMarketDataMessage";
  }
  protected:
  explicit DAMarketDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketFieldNumber = 1,
    kInstrumentFieldNumber = 2,
    kDataFieldNumber = 5,
    kTimestampFieldNumber = 3,
    kLatencyFieldNumber = 4,
  };
  // string market = 1;
  void clear_market();
  const std::string& market() const;
  void set_market(const std::string& value);
  void set_market(std::string&& value);
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  std::string* mutable_market();
  std::string* release_market();
  void set_allocated_market(std::string* market);
  private:
  const std::string& _internal_market() const;
  void _internal_set_market(const std::string& value);
  std::string* _internal_mutable_market();
  public:

  // string instrument = 2;
  void clear_instrument();
  const std::string& instrument() const;
  void set_instrument(const std::string& value);
  void set_instrument(std::string&& value);
  void set_instrument(const char* value);
  void set_instrument(const char* value, size_t size);
  std::string* mutable_instrument();
  std::string* release_instrument();
  void set_allocated_instrument(std::string* instrument);
  private:
  const std::string& _internal_instrument() const;
  void _internal_set_instrument(const std::string& value);
  std::string* _internal_mutable_instrument();
  public:

  // .google.protobuf.Any data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 latency = 4;
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::uint64 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DAMarketDataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DAMarketDataPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DAMarketDataPacket) */ {
 public:
  inline DAMarketDataPacket() : DAMarketDataPacket(nullptr) {}
  virtual ~DAMarketDataPacket();
  explicit constexpr DAMarketDataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAMarketDataPacket(const DAMarketDataPacket& from);
  DAMarketDataPacket(DAMarketDataPacket&& from) noexcept
    : DAMarketDataPacket() {
    *this = ::std::move(from);
  }

  inline DAMarketDataPacket& operator=(const DAMarketDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAMarketDataPacket& operator=(DAMarketDataPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DAMarketDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAMarketDataPacket* internal_default_instance() {
    return reinterpret_cast<const DAMarketDataPacket*>(
               &_DAMarketDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DAMarketDataPacket& a, DAMarketDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DAMarketDataPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAMarketDataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DAMarketDataPacket* New() const final {
    return CreateMaybeMessage<DAMarketDataPacket>(nullptr);
  }

  DAMarketDataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DAMarketDataPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DAMarketDataPacket& from);
  void MergeFrom(const DAMarketDataPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAMarketDataPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DAMarketDataPacket";
  }
  protected:
  explicit DAMarketDataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 5,
    kTopicFieldNumber = 1,
    kChannelFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kSequenceFieldNumber = 3,
  };
  // repeated .da.marketdata.v1.DAMarketDataMessage messages = 5;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::da::marketdata::v1::DAMarketDataMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAMarketDataMessage >*
      mutable_messages();
  private:
  const ::da::marketdata::v1::DAMarketDataMessage& _internal_messages(int index) const;
  ::da::marketdata::v1::DAMarketDataMessage* _internal_add_messages();
  public:
  const ::da::marketdata::v1::DAMarketDataMessage& messages(int index) const;
  ::da::marketdata::v1::DAMarketDataMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAMarketDataMessage >&
      messages() const;

  // uint32 topic = 1;
  void clear_topic();
  ::PROTOBUF_NAMESPACE_ID::uint32 topic() const;
  void set_topic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_topic() const;
  void _internal_set_topic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 channel = 2;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DAMarketDataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAMarketDataMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::uint32 topic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DAOrderBookEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DAOrderBookEntry) */ {
 public:
  inline DAOrderBookEntry() : DAOrderBookEntry(nullptr) {}
  virtual ~DAOrderBookEntry();
  explicit constexpr DAOrderBookEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAOrderBookEntry(const DAOrderBookEntry& from);
  DAOrderBookEntry(DAOrderBookEntry&& from) noexcept
    : DAOrderBookEntry() {
    *this = ::std::move(from);
  }

  inline DAOrderBookEntry& operator=(const DAOrderBookEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAOrderBookEntry& operator=(DAOrderBookEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DAOrderBookEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAOrderBookEntry* internal_default_instance() {
    return reinterpret_cast<const DAOrderBookEntry*>(
               &_DAOrderBookEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DAOrderBookEntry& a, DAOrderBookEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(DAOrderBookEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAOrderBookEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DAOrderBookEntry* New() const final {
    return CreateMaybeMessage<DAOrderBookEntry>(nullptr);
  }

  DAOrderBookEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DAOrderBookEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DAOrderBookEntry& from);
  void MergeFrom(const DAOrderBookEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAOrderBookEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DAOrderBookEntry";
  }
  protected:
  explicit DAOrderBookEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 3,
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // repeated uint32 order = 3;
  int order_size() const;
  private:
  int _internal_order_size() const;
  public:
  void clear_order();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_order() const;
  void _internal_add_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_order();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 order(int index) const;
  void set_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_order();

  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // uint32 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DAOrderBookEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > order_;
  mutable std::atomic<int> _order_cached_byte_size_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DAOrderBookMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DAOrderBookMessage) */ {
 public:
  inline DAOrderBookMessage() : DAOrderBookMessage(nullptr) {}
  virtual ~DAOrderBookMessage();
  explicit constexpr DAOrderBookMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAOrderBookMessage(const DAOrderBookMessage& from);
  DAOrderBookMessage(DAOrderBookMessage&& from) noexcept
    : DAOrderBookMessage() {
    *this = ::std::move(from);
  }

  inline DAOrderBookMessage& operator=(const DAOrderBookMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAOrderBookMessage& operator=(DAOrderBookMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DAOrderBookMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAOrderBookMessage* internal_default_instance() {
    return reinterpret_cast<const DAOrderBookMessage*>(
               &_DAOrderBookMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DAOrderBookMessage& a, DAOrderBookMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DAOrderBookMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAOrderBookMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DAOrderBookMessage* New() const final {
    return CreateMaybeMessage<DAOrderBookMessage>(nullptr);
  }

  DAOrderBookMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DAOrderBookMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DAOrderBookMessage& from);
  void MergeFrom(const DAOrderBookMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAOrderBookMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DAOrderBookMessage";
  }
  protected:
  explicit DAOrderBookMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DAOrderBookMessage_BookType BookType;
  static constexpr BookType BOOK_TYPE_UNDEFINED =
    DAOrderBookMessage_BookType_BOOK_TYPE_UNDEFINED;
  static constexpr BookType BOOK_TYPE_MARKET_BY_PRICE =
    DAOrderBookMessage_BookType_BOOK_TYPE_MARKET_BY_PRICE;
  static constexpr BookType BOOK_TYPE_MARKET_BY_ORDER =
    DAOrderBookMessage_BookType_BOOK_TYPE_MARKET_BY_ORDER;
  static inline bool BookType_IsValid(int value) {
    return DAOrderBookMessage_BookType_IsValid(value);
  }
  static constexpr BookType BookType_MIN =
    DAOrderBookMessage_BookType_BookType_MIN;
  static constexpr BookType BookType_MAX =
    DAOrderBookMessage_BookType_BookType_MAX;
  static constexpr int BookType_ARRAYSIZE =
    DAOrderBookMessage_BookType_BookType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BookType_descriptor() {
    return DAOrderBookMessage_BookType_descriptor();
  }
  template<typename T>
  static inline const std::string& BookType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BookType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BookType_Name.");
    return DAOrderBookMessage_BookType_Name(enum_t_value);
  }
  static inline bool BookType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BookType* value) {
    return DAOrderBookMessage_BookType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAskQueueFieldNumber = 2,
    kBidQueueFieldNumber = 3,
    kBookTypeFieldNumber = 1,
  };
  // repeated .da.marketdata.v1.DAOrderBookEntry ask_queue = 2;
  int ask_queue_size() const;
  private:
  int _internal_ask_queue_size() const;
  public:
  void clear_ask_queue();
  ::da::marketdata::v1::DAOrderBookEntry* mutable_ask_queue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >*
      mutable_ask_queue();
  private:
  const ::da::marketdata::v1::DAOrderBookEntry& _internal_ask_queue(int index) const;
  ::da::marketdata::v1::DAOrderBookEntry* _internal_add_ask_queue();
  public:
  const ::da::marketdata::v1::DAOrderBookEntry& ask_queue(int index) const;
  ::da::marketdata::v1::DAOrderBookEntry* add_ask_queue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >&
      ask_queue() const;

  // repeated .da.marketdata.v1.DAOrderBookEntry bid_queue = 3;
  int bid_queue_size() const;
  private:
  int _internal_bid_queue_size() const;
  public:
  void clear_bid_queue();
  ::da::marketdata::v1::DAOrderBookEntry* mutable_bid_queue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >*
      mutable_bid_queue();
  private:
  const ::da::marketdata::v1::DAOrderBookEntry& _internal_bid_queue(int index) const;
  ::da::marketdata::v1::DAOrderBookEntry* _internal_add_bid_queue();
  public:
  const ::da::marketdata::v1::DAOrderBookEntry& bid_queue(int index) const;
  ::da::marketdata::v1::DAOrderBookEntry* add_bid_queue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >&
      bid_queue() const;

  // .da.marketdata.v1.DAOrderBookMessage.BookType book_type = 1;
  void clear_book_type();
  ::da::marketdata::v1::DAOrderBookMessage_BookType book_type() const;
  void set_book_type(::da::marketdata::v1::DAOrderBookMessage_BookType value);
  private:
  ::da::marketdata::v1::DAOrderBookMessage_BookType _internal_book_type() const;
  void _internal_set_book_type(::da::marketdata::v1::DAOrderBookMessage_BookType value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DAOrderBookMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry > ask_queue_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry > bid_queue_;
  int book_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DATopOfBookAndLastTradeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DATopOfBookAndLastTradeMessage) */ {
 public:
  inline DATopOfBookAndLastTradeMessage() : DATopOfBookAndLastTradeMessage(nullptr) {}
  virtual ~DATopOfBookAndLastTradeMessage();
  explicit constexpr DATopOfBookAndLastTradeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DATopOfBookAndLastTradeMessage(const DATopOfBookAndLastTradeMessage& from);
  DATopOfBookAndLastTradeMessage(DATopOfBookAndLastTradeMessage&& from) noexcept
    : DATopOfBookAndLastTradeMessage() {
    *this = ::std::move(from);
  }

  inline DATopOfBookAndLastTradeMessage& operator=(const DATopOfBookAndLastTradeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DATopOfBookAndLastTradeMessage& operator=(DATopOfBookAndLastTradeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DATopOfBookAndLastTradeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DATopOfBookAndLastTradeMessage* internal_default_instance() {
    return reinterpret_cast<const DATopOfBookAndLastTradeMessage*>(
               &_DATopOfBookAndLastTradeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DATopOfBookAndLastTradeMessage& a, DATopOfBookAndLastTradeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DATopOfBookAndLastTradeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DATopOfBookAndLastTradeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DATopOfBookAndLastTradeMessage* New() const final {
    return CreateMaybeMessage<DATopOfBookAndLastTradeMessage>(nullptr);
  }

  DATopOfBookAndLastTradeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DATopOfBookAndLastTradeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DATopOfBookAndLastTradeMessage& from);
  void MergeFrom(const DATopOfBookAndLastTradeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DATopOfBookAndLastTradeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DATopOfBookAndLastTradeMessage";
  }
  protected:
  explicit DATopOfBookAndLastTradeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastPriceFieldNumber = 1,
    kAskPriceFieldNumber = 3,
    kLastVolumeFieldNumber = 2,
    kAskVolumeFieldNumber = 4,
    kBidPriceFieldNumber = 5,
    kTurnoverFieldNumber = 7,
    kOpenInterestFieldNumber = 8,
    kVolumeFieldNumber = 9,
    kPreoPriceFieldNumber = 10,
    kPostPriceFieldNumber = 11,
    kBidVolumeFieldNumber = 6,
  };
  // double last_price = 1;
  void clear_last_price();
  double last_price() const;
  void set_last_price(double value);
  private:
  double _internal_last_price() const;
  void _internal_set_last_price(double value);
  public:

  // double ask_price = 3;
  void clear_ask_price();
  double ask_price() const;
  void set_ask_price(double value);
  private:
  double _internal_ask_price() const;
  void _internal_set_ask_price(double value);
  public:

  // uint32 last_volume = 2;
  void clear_last_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_volume() const;
  void set_last_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_volume() const;
  void _internal_set_last_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ask_volume = 4;
  void clear_ask_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 ask_volume() const;
  void set_ask_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ask_volume() const;
  void _internal_set_ask_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double bid_price = 5;
  void clear_bid_price();
  double bid_price() const;
  void set_bid_price(double value);
  private:
  double _internal_bid_price() const;
  void _internal_set_bid_price(double value);
  public:

  // double turnover = 7;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // uint64 open_interest = 8;
  void clear_open_interest();
  ::PROTOBUF_NAMESPACE_ID::uint64 open_interest() const;
  void set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open_interest() const;
  void _internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 volume = 9;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double preo_price = 10;
  void clear_preo_price();
  double preo_price() const;
  void set_preo_price(double value);
  private:
  double _internal_preo_price() const;
  void _internal_set_preo_price(double value);
  public:

  // double post_price = 11;
  void clear_post_price();
  double post_price() const;
  void set_post_price(double value);
  private:
  double _internal_post_price() const;
  void _internal_set_post_price(double value);
  public:

  // uint32 bid_volume = 6;
  void clear_bid_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 bid_volume() const;
  void set_bid_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bid_volume() const;
  void _internal_set_bid_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DATopOfBookAndLastTradeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double last_price_;
  double ask_price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ask_volume_;
  double bid_price_;
  double turnover_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_interest_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  double preo_price_;
  double post_price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bid_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DATradeStatisticsMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DATradeStatisticsMessage) */ {
 public:
  inline DATradeStatisticsMessage() : DATradeStatisticsMessage(nullptr) {}
  virtual ~DATradeStatisticsMessage();
  explicit constexpr DATradeStatisticsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DATradeStatisticsMessage(const DATradeStatisticsMessage& from);
  DATradeStatisticsMessage(DATradeStatisticsMessage&& from) noexcept
    : DATradeStatisticsMessage() {
    *this = ::std::move(from);
  }

  inline DATradeStatisticsMessage& operator=(const DATradeStatisticsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DATradeStatisticsMessage& operator=(DATradeStatisticsMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DATradeStatisticsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DATradeStatisticsMessage* internal_default_instance() {
    return reinterpret_cast<const DATradeStatisticsMessage*>(
               &_DATradeStatisticsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DATradeStatisticsMessage& a, DATradeStatisticsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DATradeStatisticsMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DATradeStatisticsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DATradeStatisticsMessage* New() const final {
    return CreateMaybeMessage<DATradeStatisticsMessage>(nullptr);
  }

  DATradeStatisticsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DATradeStatisticsMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DATradeStatisticsMessage& from);
  void MergeFrom(const DATradeStatisticsMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DATradeStatisticsMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DATradeStatisticsMessage";
  }
  protected:
  explicit DATradeStatisticsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreClosePriceFieldNumber = 1,
    kPreSettlementPriceFieldNumber = 2,
    kPreOpenInterestFieldNumber = 3,
    kOpenPriceFieldNumber = 4,
    kClosePriceFieldNumber = 5,
    kSettlementPriceFieldNumber = 6,
    kDayHighestPriceFieldNumber = 7,
    kDayLowestPriceFieldNumber = 8,
    kUpperLimitPriceFieldNumber = 9,
    kLowerLimitPriceFieldNumber = 10,
  };
  // double pre_close_price = 1;
  void clear_pre_close_price();
  double pre_close_price() const;
  void set_pre_close_price(double value);
  private:
  double _internal_pre_close_price() const;
  void _internal_set_pre_close_price(double value);
  public:

  // double pre_settlement_price = 2;
  void clear_pre_settlement_price();
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);
  private:
  double _internal_pre_settlement_price() const;
  void _internal_set_pre_settlement_price(double value);
  public:

  // uint64 pre_open_interest = 3;
  void clear_pre_open_interest();
  ::PROTOBUF_NAMESPACE_ID::uint64 pre_open_interest() const;
  void set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pre_open_interest() const;
  void _internal_set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double open_price = 4;
  void clear_open_price();
  double open_price() const;
  void set_open_price(double value);
  private:
  double _internal_open_price() const;
  void _internal_set_open_price(double value);
  public:

  // double close_price = 5;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // double settlement_price = 6;
  void clear_settlement_price();
  double settlement_price() const;
  void set_settlement_price(double value);
  private:
  double _internal_settlement_price() const;
  void _internal_set_settlement_price(double value);
  public:

  // double day_highest_price = 7;
  void clear_day_highest_price();
  double day_highest_price() const;
  void set_day_highest_price(double value);
  private:
  double _internal_day_highest_price() const;
  void _internal_set_day_highest_price(double value);
  public:

  // double day_lowest_price = 8;
  void clear_day_lowest_price();
  double day_lowest_price() const;
  void set_day_lowest_price(double value);
  private:
  double _internal_day_lowest_price() const;
  void _internal_set_day_lowest_price(double value);
  public:

  // double upper_limit_price = 9;
  void clear_upper_limit_price();
  double upper_limit_price() const;
  void set_upper_limit_price(double value);
  private:
  double _internal_upper_limit_price() const;
  void _internal_set_upper_limit_price(double value);
  public:

  // double lower_limit_price = 10;
  void clear_lower_limit_price();
  double lower_limit_price() const;
  void set_lower_limit_price(double value);
  private:
  double _internal_lower_limit_price() const;
  void _internal_set_lower_limit_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DATradeStatisticsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double pre_close_price_;
  double pre_settlement_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pre_open_interest_;
  double open_price_;
  double close_price_;
  double settlement_price_;
  double day_highest_price_;
  double day_lowest_price_;
  double upper_limit_price_;
  double lower_limit_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DAStatusMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DAStatusMessage) */ {
 public:
  inline DAStatusMessage() : DAStatusMessage(nullptr) {}
  virtual ~DAStatusMessage();
  explicit constexpr DAStatusMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAStatusMessage(const DAStatusMessage& from);
  DAStatusMessage(DAStatusMessage&& from) noexcept
    : DAStatusMessage() {
    *this = ::std::move(from);
  }

  inline DAStatusMessage& operator=(const DAStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAStatusMessage& operator=(DAStatusMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DAStatusMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAStatusMessage* internal_default_instance() {
    return reinterpret_cast<const DAStatusMessage*>(
               &_DAStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DAStatusMessage& a, DAStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DAStatusMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAStatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DAStatusMessage* New() const final {
    return CreateMaybeMessage<DAStatusMessage>(nullptr);
  }

  DAStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DAStatusMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DAStatusMessage& from);
  void MergeFrom(const DAStatusMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAStatusMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DAStatusMessage";
  }
  protected:
  explicit DAStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DAStatusMessage_StatusType StatusType;
  static constexpr StatusType STATUS_TYPE_UNDEFINED =
    DAStatusMessage_StatusType_STATUS_TYPE_UNDEFINED;
  static constexpr StatusType STATUS_TYPE_MARKET =
    DAStatusMessage_StatusType_STATUS_TYPE_MARKET;
  static constexpr StatusType STATUS_TYPE_INSTRUMENT =
    DAStatusMessage_StatusType_STATUS_TYPE_INSTRUMENT;
  static inline bool StatusType_IsValid(int value) {
    return DAStatusMessage_StatusType_IsValid(value);
  }
  static constexpr StatusType StatusType_MIN =
    DAStatusMessage_StatusType_StatusType_MIN;
  static constexpr StatusType StatusType_MAX =
    DAStatusMessage_StatusType_StatusType_MAX;
  static constexpr int StatusType_ARRAYSIZE =
    DAStatusMessage_StatusType_StatusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusType_descriptor() {
    return DAStatusMessage_StatusType_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusType_Name.");
    return DAStatusMessage_StatusType_Name(enum_t_value);
  }
  static inline bool StatusType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatusType* value) {
    return DAStatusMessage_StatusType_Parse(name, value);
  }

  typedef DAStatusMessage_TradeStatus TradeStatus;
  static constexpr TradeStatus STATUS_NOT_TRADING =
    DAStatusMessage_TradeStatus_STATUS_NOT_TRADING;
  static constexpr TradeStatus STATUS_PREO =
    DAStatusMessage_TradeStatus_STATUS_PREO;
  static constexpr TradeStatus STATUS_TRADING =
    DAStatusMessage_TradeStatus_STATUS_TRADING;
  static constexpr TradeStatus STATUS_POST =
    DAStatusMessage_TradeStatus_STATUS_POST;
  static inline bool TradeStatus_IsValid(int value) {
    return DAStatusMessage_TradeStatus_IsValid(value);
  }
  static constexpr TradeStatus TradeStatus_MIN =
    DAStatusMessage_TradeStatus_TradeStatus_MIN;
  static constexpr TradeStatus TradeStatus_MAX =
    DAStatusMessage_TradeStatus_TradeStatus_MAX;
  static constexpr int TradeStatus_ARRAYSIZE =
    DAStatusMessage_TradeStatus_TradeStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TradeStatus_descriptor() {
    return DAStatusMessage_TradeStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& TradeStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TradeStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TradeStatus_Name.");
    return DAStatusMessage_TradeStatus_Name(enum_t_value);
  }
  static inline bool TradeStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TradeStatus* value) {
    return DAStatusMessage_TradeStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 4,
    kDatetimeFieldNumber = 2,
    kStatusTypeFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 datetime = 2;
  void clear_datetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime() const;
  void set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_datetime() const;
  void _internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .da.marketdata.v1.DAStatusMessage.StatusType status_type = 1;
  void clear_status_type();
  ::da::marketdata::v1::DAStatusMessage_StatusType status_type() const;
  void set_status_type(::da::marketdata::v1::DAStatusMessage_StatusType value);
  private:
  ::da::marketdata::v1::DAStatusMessage_StatusType _internal_status_type() const;
  void _internal_set_status_type(::da::marketdata::v1::DAStatusMessage_StatusType value);
  public:

  // .da.marketdata.v1.DAStatusMessage.TradeStatus status = 3;
  void clear_status();
  ::da::marketdata::v1::DAStatusMessage_TradeStatus status() const;
  void set_status(::da::marketdata::v1::DAStatusMessage_TradeStatus value);
  private:
  ::da::marketdata::v1::DAStatusMessage_TradeStatus _internal_status() const;
  void _internal_set_status(::da::marketdata::v1::DAStatusMessage_TradeStatus value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DAStatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime_;
  int status_type_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DABBMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DABBMessage) */ {
 public:
  inline DABBMessage() : DABBMessage(nullptr) {}
  virtual ~DABBMessage();
  explicit constexpr DABBMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DABBMessage(const DABBMessage& from);
  DABBMessage(DABBMessage&& from) noexcept
    : DABBMessage() {
    *this = ::std::move(from);
  }

  inline DABBMessage& operator=(const DABBMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DABBMessage& operator=(DABBMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DABBMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DABBMessage* internal_default_instance() {
    return reinterpret_cast<const DABBMessage*>(
               &_DABBMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DABBMessage& a, DABBMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DABBMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DABBMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DABBMessage* New() const final {
    return CreateMaybeMessage<DABBMessage>(nullptr);
  }

  DABBMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DABBMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DABBMessage& from);
  void MergeFrom(const DABBMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DABBMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DABBMessage";
  }
  protected:
  explicit DABBMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopMessageFieldNumber = 1,
    kOrderBookFieldNumber = 2,
    kStaticsFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // .da.marketdata.v1.DATopOfBookAndLastTradeMessage top_message = 1;
  bool has_top_message() const;
  private:
  bool _internal_has_top_message() const;
  public:
  void clear_top_message();
  const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage& top_message() const;
  ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* release_top_message();
  ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* mutable_top_message();
  void set_allocated_top_message(::da::marketdata::v1::DATopOfBookAndLastTradeMessage* top_message);
  private:
  const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage& _internal_top_message() const;
  ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* _internal_mutable_top_message();
  public:
  void unsafe_arena_set_allocated_top_message(
      ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* top_message);
  ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* unsafe_arena_release_top_message();

  // .da.marketdata.v1.DAOrderBookMessage order_book = 2;
  bool has_order_book() const;
  private:
  bool _internal_has_order_book() const;
  public:
  void clear_order_book();
  const ::da::marketdata::v1::DAOrderBookMessage& order_book() const;
  ::da::marketdata::v1::DAOrderBookMessage* release_order_book();
  ::da::marketdata::v1::DAOrderBookMessage* mutable_order_book();
  void set_allocated_order_book(::da::marketdata::v1::DAOrderBookMessage* order_book);
  private:
  const ::da::marketdata::v1::DAOrderBookMessage& _internal_order_book() const;
  ::da::marketdata::v1::DAOrderBookMessage* _internal_mutable_order_book();
  public:
  void unsafe_arena_set_allocated_order_book(
      ::da::marketdata::v1::DAOrderBookMessage* order_book);
  ::da::marketdata::v1::DAOrderBookMessage* unsafe_arena_release_order_book();

  // .da.marketdata.v1.DATradeStatisticsMessage statics = 3;
  bool has_statics() const;
  private:
  bool _internal_has_statics() const;
  public:
  void clear_statics();
  const ::da::marketdata::v1::DATradeStatisticsMessage& statics() const;
  ::da::marketdata::v1::DATradeStatisticsMessage* release_statics();
  ::da::marketdata::v1::DATradeStatisticsMessage* mutable_statics();
  void set_allocated_statics(::da::marketdata::v1::DATradeStatisticsMessage* statics);
  private:
  const ::da::marketdata::v1::DATradeStatisticsMessage& _internal_statics() const;
  ::da::marketdata::v1::DATradeStatisticsMessage* _internal_mutable_statics();
  public:
  void unsafe_arena_set_allocated_statics(
      ::da::marketdata::v1::DATradeStatisticsMessage* statics);
  ::da::marketdata::v1::DATradeStatisticsMessage* unsafe_arena_release_statics();

  // .da.marketdata.v1.DAStatusMessage status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::da::marketdata::v1::DAStatusMessage& status() const;
  ::da::marketdata::v1::DAStatusMessage* release_status();
  ::da::marketdata::v1::DAStatusMessage* mutable_status();
  void set_allocated_status(::da::marketdata::v1::DAStatusMessage* status);
  private:
  const ::da::marketdata::v1::DAStatusMessage& _internal_status() const;
  ::da::marketdata::v1::DAStatusMessage* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::da::marketdata::v1::DAStatusMessage* status);
  ::da::marketdata::v1::DAStatusMessage* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DABBMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* top_message_;
  ::da::marketdata::v1::DAOrderBookMessage* order_book_;
  ::da::marketdata::v1::DATradeStatisticsMessage* statics_;
  ::da::marketdata::v1::DAStatusMessage* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// -------------------------------------------------------------------

class DAHeartbeatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:da.marketdata.v1.DAHeartbeatMessage) */ {
 public:
  inline DAHeartbeatMessage() : DAHeartbeatMessage(nullptr) {}
  virtual ~DAHeartbeatMessage();
  explicit constexpr DAHeartbeatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DAHeartbeatMessage(const DAHeartbeatMessage& from);
  DAHeartbeatMessage(DAHeartbeatMessage&& from) noexcept
    : DAHeartbeatMessage() {
    *this = ::std::move(from);
  }

  inline DAHeartbeatMessage& operator=(const DAHeartbeatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DAHeartbeatMessage& operator=(DAHeartbeatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DAHeartbeatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DAHeartbeatMessage* internal_default_instance() {
    return reinterpret_cast<const DAHeartbeatMessage*>(
               &_DAHeartbeatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DAHeartbeatMessage& a, DAHeartbeatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DAHeartbeatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DAHeartbeatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DAHeartbeatMessage* New() const final {
    return CreateMaybeMessage<DAHeartbeatMessage>(nullptr);
  }

  DAHeartbeatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DAHeartbeatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DAHeartbeatMessage& from);
  void MergeFrom(const DAHeartbeatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DAHeartbeatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "da.marketdata.v1.DAHeartbeatMessage";
  }
  protected:
  explicit DAHeartbeatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_da_5fmarketdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatetimeFieldNumber = 1,
  };
  // uint64 datetime = 1;
  void clear_datetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime() const;
  void set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_datetime() const;
  void _internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:da.marketdata.v1.DAHeartbeatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_da_5fmarketdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DAMarketDataMessage

// string market = 1;
inline void DAMarketDataMessage::clear_market() {
  market_.ClearToEmpty();
}
inline const std::string& DAMarketDataMessage::market() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataMessage.market)
  return _internal_market();
}
inline void DAMarketDataMessage::set_market(const std::string& value) {
  _internal_set_market(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataMessage.market)
}
inline std::string* DAMarketDataMessage::mutable_market() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DAMarketDataMessage.market)
  return _internal_mutable_market();
}
inline const std::string& DAMarketDataMessage::_internal_market() const {
  return market_.Get();
}
inline void DAMarketDataMessage::_internal_set_market(const std::string& value) {
  
  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DAMarketDataMessage::set_market(std::string&& value) {
  
  market_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:da.marketdata.v1.DAMarketDataMessage.market)
}
inline void DAMarketDataMessage::set_market(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:da.marketdata.v1.DAMarketDataMessage.market)
}
inline void DAMarketDataMessage::set_market(const char* value,
    size_t size) {
  
  market_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:da.marketdata.v1.DAMarketDataMessage.market)
}
inline std::string* DAMarketDataMessage::_internal_mutable_market() {
  
  return market_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DAMarketDataMessage::release_market() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DAMarketDataMessage.market)
  return market_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DAMarketDataMessage::set_allocated_market(std::string* market) {
  if (market != nullptr) {
    
  } else {
    
  }
  market_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DAMarketDataMessage.market)
}

// string instrument = 2;
inline void DAMarketDataMessage::clear_instrument() {
  instrument_.ClearToEmpty();
}
inline const std::string& DAMarketDataMessage::instrument() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataMessage.instrument)
  return _internal_instrument();
}
inline void DAMarketDataMessage::set_instrument(const std::string& value) {
  _internal_set_instrument(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataMessage.instrument)
}
inline std::string* DAMarketDataMessage::mutable_instrument() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DAMarketDataMessage.instrument)
  return _internal_mutable_instrument();
}
inline const std::string& DAMarketDataMessage::_internal_instrument() const {
  return instrument_.Get();
}
inline void DAMarketDataMessage::_internal_set_instrument(const std::string& value) {
  
  instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DAMarketDataMessage::set_instrument(std::string&& value) {
  
  instrument_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:da.marketdata.v1.DAMarketDataMessage.instrument)
}
inline void DAMarketDataMessage::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:da.marketdata.v1.DAMarketDataMessage.instrument)
}
inline void DAMarketDataMessage::set_instrument(const char* value,
    size_t size) {
  
  instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:da.marketdata.v1.DAMarketDataMessage.instrument)
}
inline std::string* DAMarketDataMessage::_internal_mutable_instrument() {
  
  return instrument_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DAMarketDataMessage::release_instrument() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DAMarketDataMessage.instrument)
  return instrument_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DAMarketDataMessage::set_allocated_instrument(std::string* instrument) {
  if (instrument != nullptr) {
    
  } else {
    
  }
  instrument_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DAMarketDataMessage.instrument)
}

// uint64 timestamp = 3;
inline void DAMarketDataMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAMarketDataMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAMarketDataMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataMessage.timestamp)
  return _internal_timestamp();
}
inline void DAMarketDataMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void DAMarketDataMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataMessage.timestamp)
}

// uint64 latency = 4;
inline void DAMarketDataMessage::clear_latency() {
  latency_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAMarketDataMessage::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAMarketDataMessage::latency() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataMessage.latency)
  return _internal_latency();
}
inline void DAMarketDataMessage::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latency_ = value;
}
inline void DAMarketDataMessage::set_latency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataMessage.latency)
}

// .google.protobuf.Any data = 5;
inline bool DAMarketDataMessage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool DAMarketDataMessage::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& DAMarketDataMessage::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& DAMarketDataMessage::data() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataMessage.data)
  return _internal_data();
}
inline void DAMarketDataMessage::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:da.marketdata.v1.DAMarketDataMessage.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* DAMarketDataMessage::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* DAMarketDataMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DAMarketDataMessage.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* DAMarketDataMessage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* DAMarketDataMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DAMarketDataMessage.data)
  return _internal_mutable_data();
}
inline void DAMarketDataMessage::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DAMarketDataMessage.data)
}

// -------------------------------------------------------------------

// DAMarketDataPacket

// uint32 topic = 1;
inline void DAMarketDataPacket::clear_topic() {
  topic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAMarketDataPacket::_internal_topic() const {
  return topic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAMarketDataPacket::topic() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataPacket.topic)
  return _internal_topic();
}
inline void DAMarketDataPacket::_internal_set_topic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  topic_ = value;
}
inline void DAMarketDataPacket::set_topic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataPacket.topic)
}

// uint32 channel = 2;
inline void DAMarketDataPacket::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAMarketDataPacket::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAMarketDataPacket::channel() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataPacket.channel)
  return _internal_channel();
}
inline void DAMarketDataPacket::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void DAMarketDataPacket::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataPacket.channel)
}

// uint32 sequence = 3;
inline void DAMarketDataPacket::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAMarketDataPacket::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAMarketDataPacket::sequence() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataPacket.sequence)
  return _internal_sequence();
}
inline void DAMarketDataPacket::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void DAMarketDataPacket::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataPacket.sequence)
}

// uint64 timestamp = 4;
inline void DAMarketDataPacket::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAMarketDataPacket::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAMarketDataPacket::timestamp() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataPacket.timestamp)
  return _internal_timestamp();
}
inline void DAMarketDataPacket::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void DAMarketDataPacket::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAMarketDataPacket.timestamp)
}

// repeated .da.marketdata.v1.DAMarketDataMessage messages = 5;
inline int DAMarketDataPacket::_internal_messages_size() const {
  return messages_.size();
}
inline int DAMarketDataPacket::messages_size() const {
  return _internal_messages_size();
}
inline void DAMarketDataPacket::clear_messages() {
  messages_.Clear();
}
inline ::da::marketdata::v1::DAMarketDataMessage* DAMarketDataPacket::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DAMarketDataPacket.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAMarketDataMessage >*
DAMarketDataPacket::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:da.marketdata.v1.DAMarketDataPacket.messages)
  return &messages_;
}
inline const ::da::marketdata::v1::DAMarketDataMessage& DAMarketDataPacket::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::da::marketdata::v1::DAMarketDataMessage& DAMarketDataPacket::messages(int index) const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAMarketDataPacket.messages)
  return _internal_messages(index);
}
inline ::da::marketdata::v1::DAMarketDataMessage* DAMarketDataPacket::_internal_add_messages() {
  return messages_.Add();
}
inline ::da::marketdata::v1::DAMarketDataMessage* DAMarketDataPacket::add_messages() {
  // @@protoc_insertion_point(field_add:da.marketdata.v1.DAMarketDataPacket.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAMarketDataMessage >&
DAMarketDataPacket::messages() const {
  // @@protoc_insertion_point(field_list:da.marketdata.v1.DAMarketDataPacket.messages)
  return messages_;
}

// -------------------------------------------------------------------

// DAOrderBookEntry

// double price = 1;
inline void DAOrderBookEntry::clear_price() {
  price_ = 0;
}
inline double DAOrderBookEntry::_internal_price() const {
  return price_;
}
inline double DAOrderBookEntry::price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAOrderBookEntry.price)
  return _internal_price();
}
inline void DAOrderBookEntry::_internal_set_price(double value) {
  
  price_ = value;
}
inline void DAOrderBookEntry::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAOrderBookEntry.price)
}

// uint32 quantity = 2;
inline void DAOrderBookEntry::clear_quantity() {
  quantity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAOrderBookEntry::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAOrderBookEntry::quantity() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAOrderBookEntry.quantity)
  return _internal_quantity();
}
inline void DAOrderBookEntry::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quantity_ = value;
}
inline void DAOrderBookEntry::set_quantity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAOrderBookEntry.quantity)
}

// repeated uint32 order = 3;
inline int DAOrderBookEntry::_internal_order_size() const {
  return order_.size();
}
inline int DAOrderBookEntry::order_size() const {
  return _internal_order_size();
}
inline void DAOrderBookEntry::clear_order() {
  order_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAOrderBookEntry::_internal_order(int index) const {
  return order_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DAOrderBookEntry::order(int index) const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAOrderBookEntry.order)
  return _internal_order(index);
}
inline void DAOrderBookEntry::set_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAOrderBookEntry.order)
}
inline void DAOrderBookEntry::_internal_add_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  order_.Add(value);
}
inline void DAOrderBookEntry::add_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_order(value);
  // @@protoc_insertion_point(field_add:da.marketdata.v1.DAOrderBookEntry.order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DAOrderBookEntry::_internal_order() const {
  return order_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DAOrderBookEntry::order() const {
  // @@protoc_insertion_point(field_list:da.marketdata.v1.DAOrderBookEntry.order)
  return _internal_order();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DAOrderBookEntry::_internal_mutable_order() {
  return &order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DAOrderBookEntry::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:da.marketdata.v1.DAOrderBookEntry.order)
  return _internal_mutable_order();
}

// -------------------------------------------------------------------

// DAOrderBookMessage

// .da.marketdata.v1.DAOrderBookMessage.BookType book_type = 1;
inline void DAOrderBookMessage::clear_book_type() {
  book_type_ = 0;
}
inline ::da::marketdata::v1::DAOrderBookMessage_BookType DAOrderBookMessage::_internal_book_type() const {
  return static_cast< ::da::marketdata::v1::DAOrderBookMessage_BookType >(book_type_);
}
inline ::da::marketdata::v1::DAOrderBookMessage_BookType DAOrderBookMessage::book_type() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAOrderBookMessage.book_type)
  return _internal_book_type();
}
inline void DAOrderBookMessage::_internal_set_book_type(::da::marketdata::v1::DAOrderBookMessage_BookType value) {
  
  book_type_ = value;
}
inline void DAOrderBookMessage::set_book_type(::da::marketdata::v1::DAOrderBookMessage_BookType value) {
  _internal_set_book_type(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAOrderBookMessage.book_type)
}

// repeated .da.marketdata.v1.DAOrderBookEntry ask_queue = 2;
inline int DAOrderBookMessage::_internal_ask_queue_size() const {
  return ask_queue_.size();
}
inline int DAOrderBookMessage::ask_queue_size() const {
  return _internal_ask_queue_size();
}
inline void DAOrderBookMessage::clear_ask_queue() {
  ask_queue_.Clear();
}
inline ::da::marketdata::v1::DAOrderBookEntry* DAOrderBookMessage::mutable_ask_queue(int index) {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DAOrderBookMessage.ask_queue)
  return ask_queue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >*
DAOrderBookMessage::mutable_ask_queue() {
  // @@protoc_insertion_point(field_mutable_list:da.marketdata.v1.DAOrderBookMessage.ask_queue)
  return &ask_queue_;
}
inline const ::da::marketdata::v1::DAOrderBookEntry& DAOrderBookMessage::_internal_ask_queue(int index) const {
  return ask_queue_.Get(index);
}
inline const ::da::marketdata::v1::DAOrderBookEntry& DAOrderBookMessage::ask_queue(int index) const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAOrderBookMessage.ask_queue)
  return _internal_ask_queue(index);
}
inline ::da::marketdata::v1::DAOrderBookEntry* DAOrderBookMessage::_internal_add_ask_queue() {
  return ask_queue_.Add();
}
inline ::da::marketdata::v1::DAOrderBookEntry* DAOrderBookMessage::add_ask_queue() {
  // @@protoc_insertion_point(field_add:da.marketdata.v1.DAOrderBookMessage.ask_queue)
  return _internal_add_ask_queue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >&
DAOrderBookMessage::ask_queue() const {
  // @@protoc_insertion_point(field_list:da.marketdata.v1.DAOrderBookMessage.ask_queue)
  return ask_queue_;
}

// repeated .da.marketdata.v1.DAOrderBookEntry bid_queue = 3;
inline int DAOrderBookMessage::_internal_bid_queue_size() const {
  return bid_queue_.size();
}
inline int DAOrderBookMessage::bid_queue_size() const {
  return _internal_bid_queue_size();
}
inline void DAOrderBookMessage::clear_bid_queue() {
  bid_queue_.Clear();
}
inline ::da::marketdata::v1::DAOrderBookEntry* DAOrderBookMessage::mutable_bid_queue(int index) {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DAOrderBookMessage.bid_queue)
  return bid_queue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >*
DAOrderBookMessage::mutable_bid_queue() {
  // @@protoc_insertion_point(field_mutable_list:da.marketdata.v1.DAOrderBookMessage.bid_queue)
  return &bid_queue_;
}
inline const ::da::marketdata::v1::DAOrderBookEntry& DAOrderBookMessage::_internal_bid_queue(int index) const {
  return bid_queue_.Get(index);
}
inline const ::da::marketdata::v1::DAOrderBookEntry& DAOrderBookMessage::bid_queue(int index) const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAOrderBookMessage.bid_queue)
  return _internal_bid_queue(index);
}
inline ::da::marketdata::v1::DAOrderBookEntry* DAOrderBookMessage::_internal_add_bid_queue() {
  return bid_queue_.Add();
}
inline ::da::marketdata::v1::DAOrderBookEntry* DAOrderBookMessage::add_bid_queue() {
  // @@protoc_insertion_point(field_add:da.marketdata.v1.DAOrderBookMessage.bid_queue)
  return _internal_add_bid_queue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::da::marketdata::v1::DAOrderBookEntry >&
DAOrderBookMessage::bid_queue() const {
  // @@protoc_insertion_point(field_list:da.marketdata.v1.DAOrderBookMessage.bid_queue)
  return bid_queue_;
}

// -------------------------------------------------------------------

// DATopOfBookAndLastTradeMessage

// double last_price = 1;
inline void DATopOfBookAndLastTradeMessage::clear_last_price() {
  last_price_ = 0;
}
inline double DATopOfBookAndLastTradeMessage::_internal_last_price() const {
  return last_price_;
}
inline double DATopOfBookAndLastTradeMessage::last_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.last_price)
  return _internal_last_price();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_last_price(double value) {
  
  last_price_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_last_price(double value) {
  _internal_set_last_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.last_price)
}

// uint32 last_volume = 2;
inline void DATopOfBookAndLastTradeMessage::clear_last_volume() {
  last_volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATopOfBookAndLastTradeMessage::_internal_last_volume() const {
  return last_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATopOfBookAndLastTradeMessage::last_volume() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.last_volume)
  return _internal_last_volume();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_last_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_volume_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_last_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_volume(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.last_volume)
}

// double ask_price = 3;
inline void DATopOfBookAndLastTradeMessage::clear_ask_price() {
  ask_price_ = 0;
}
inline double DATopOfBookAndLastTradeMessage::_internal_ask_price() const {
  return ask_price_;
}
inline double DATopOfBookAndLastTradeMessage::ask_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.ask_price)
  return _internal_ask_price();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_ask_price(double value) {
  
  ask_price_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_ask_price(double value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.ask_price)
}

// uint32 ask_volume = 4;
inline void DATopOfBookAndLastTradeMessage::clear_ask_volume() {
  ask_volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATopOfBookAndLastTradeMessage::_internal_ask_volume() const {
  return ask_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATopOfBookAndLastTradeMessage::ask_volume() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.ask_volume)
  return _internal_ask_volume();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_ask_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ask_volume_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_ask_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ask_volume(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.ask_volume)
}

// double bid_price = 5;
inline void DATopOfBookAndLastTradeMessage::clear_bid_price() {
  bid_price_ = 0;
}
inline double DATopOfBookAndLastTradeMessage::_internal_bid_price() const {
  return bid_price_;
}
inline double DATopOfBookAndLastTradeMessage::bid_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.bid_price)
  return _internal_bid_price();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_bid_price(double value) {
  
  bid_price_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_bid_price(double value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.bid_price)
}

// uint32 bid_volume = 6;
inline void DATopOfBookAndLastTradeMessage::clear_bid_volume() {
  bid_volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATopOfBookAndLastTradeMessage::_internal_bid_volume() const {
  return bid_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATopOfBookAndLastTradeMessage::bid_volume() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.bid_volume)
  return _internal_bid_volume();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_bid_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bid_volume_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_bid_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bid_volume(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.bid_volume)
}

// double turnover = 7;
inline void DATopOfBookAndLastTradeMessage::clear_turnover() {
  turnover_ = 0;
}
inline double DATopOfBookAndLastTradeMessage::_internal_turnover() const {
  return turnover_;
}
inline double DATopOfBookAndLastTradeMessage::turnover() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.turnover)
  return _internal_turnover();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.turnover)
}

// uint64 open_interest = 8;
inline void DATopOfBookAndLastTradeMessage::clear_open_interest() {
  open_interest_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DATopOfBookAndLastTradeMessage::_internal_open_interest() const {
  return open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DATopOfBookAndLastTradeMessage::open_interest() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.open_interest)
  return _internal_open_interest();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_interest_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.open_interest)
}

// uint64 volume = 9;
inline void DATopOfBookAndLastTradeMessage::clear_volume() {
  volume_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DATopOfBookAndLastTradeMessage::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DATopOfBookAndLastTradeMessage::volume() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.volume)
  return _internal_volume();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volume_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.volume)
}

// double preo_price = 10;
inline void DATopOfBookAndLastTradeMessage::clear_preo_price() {
  preo_price_ = 0;
}
inline double DATopOfBookAndLastTradeMessage::_internal_preo_price() const {
  return preo_price_;
}
inline double DATopOfBookAndLastTradeMessage::preo_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.preo_price)
  return _internal_preo_price();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_preo_price(double value) {
  
  preo_price_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_preo_price(double value) {
  _internal_set_preo_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.preo_price)
}

// double post_price = 11;
inline void DATopOfBookAndLastTradeMessage::clear_post_price() {
  post_price_ = 0;
}
inline double DATopOfBookAndLastTradeMessage::_internal_post_price() const {
  return post_price_;
}
inline double DATopOfBookAndLastTradeMessage::post_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATopOfBookAndLastTradeMessage.post_price)
  return _internal_post_price();
}
inline void DATopOfBookAndLastTradeMessage::_internal_set_post_price(double value) {
  
  post_price_ = value;
}
inline void DATopOfBookAndLastTradeMessage::set_post_price(double value) {
  _internal_set_post_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATopOfBookAndLastTradeMessage.post_price)
}

// -------------------------------------------------------------------

// DATradeStatisticsMessage

// double pre_close_price = 1;
inline void DATradeStatisticsMessage::clear_pre_close_price() {
  pre_close_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_pre_close_price() const {
  return pre_close_price_;
}
inline double DATradeStatisticsMessage::pre_close_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.pre_close_price)
  return _internal_pre_close_price();
}
inline void DATradeStatisticsMessage::_internal_set_pre_close_price(double value) {
  
  pre_close_price_ = value;
}
inline void DATradeStatisticsMessage::set_pre_close_price(double value) {
  _internal_set_pre_close_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.pre_close_price)
}

// double pre_settlement_price = 2;
inline void DATradeStatisticsMessage::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_pre_settlement_price() const {
  return pre_settlement_price_;
}
inline double DATradeStatisticsMessage::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.pre_settlement_price)
  return _internal_pre_settlement_price();
}
inline void DATradeStatisticsMessage::_internal_set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
}
inline void DATradeStatisticsMessage::set_pre_settlement_price(double value) {
  _internal_set_pre_settlement_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.pre_settlement_price)
}

// uint64 pre_open_interest = 3;
inline void DATradeStatisticsMessage::clear_pre_open_interest() {
  pre_open_interest_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DATradeStatisticsMessage::_internal_pre_open_interest() const {
  return pre_open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DATradeStatisticsMessage::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.pre_open_interest)
  return _internal_pre_open_interest();
}
inline void DATradeStatisticsMessage::_internal_set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pre_open_interest_ = value;
}
inline void DATradeStatisticsMessage::set_pre_open_interest(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pre_open_interest(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.pre_open_interest)
}

// double open_price = 4;
inline void DATradeStatisticsMessage::clear_open_price() {
  open_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_open_price() const {
  return open_price_;
}
inline double DATradeStatisticsMessage::open_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.open_price)
  return _internal_open_price();
}
inline void DATradeStatisticsMessage::_internal_set_open_price(double value) {
  
  open_price_ = value;
}
inline void DATradeStatisticsMessage::set_open_price(double value) {
  _internal_set_open_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.open_price)
}

// double close_price = 5;
inline void DATradeStatisticsMessage::clear_close_price() {
  close_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_close_price() const {
  return close_price_;
}
inline double DATradeStatisticsMessage::close_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.close_price)
  return _internal_close_price();
}
inline void DATradeStatisticsMessage::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void DATradeStatisticsMessage::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.close_price)
}

// double settlement_price = 6;
inline void DATradeStatisticsMessage::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_settlement_price() const {
  return settlement_price_;
}
inline double DATradeStatisticsMessage::settlement_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.settlement_price)
  return _internal_settlement_price();
}
inline void DATradeStatisticsMessage::_internal_set_settlement_price(double value) {
  
  settlement_price_ = value;
}
inline void DATradeStatisticsMessage::set_settlement_price(double value) {
  _internal_set_settlement_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.settlement_price)
}

// double day_highest_price = 7;
inline void DATradeStatisticsMessage::clear_day_highest_price() {
  day_highest_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_day_highest_price() const {
  return day_highest_price_;
}
inline double DATradeStatisticsMessage::day_highest_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.day_highest_price)
  return _internal_day_highest_price();
}
inline void DATradeStatisticsMessage::_internal_set_day_highest_price(double value) {
  
  day_highest_price_ = value;
}
inline void DATradeStatisticsMessage::set_day_highest_price(double value) {
  _internal_set_day_highest_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.day_highest_price)
}

// double day_lowest_price = 8;
inline void DATradeStatisticsMessage::clear_day_lowest_price() {
  day_lowest_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_day_lowest_price() const {
  return day_lowest_price_;
}
inline double DATradeStatisticsMessage::day_lowest_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.day_lowest_price)
  return _internal_day_lowest_price();
}
inline void DATradeStatisticsMessage::_internal_set_day_lowest_price(double value) {
  
  day_lowest_price_ = value;
}
inline void DATradeStatisticsMessage::set_day_lowest_price(double value) {
  _internal_set_day_lowest_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.day_lowest_price)
}

// double upper_limit_price = 9;
inline void DATradeStatisticsMessage::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_upper_limit_price() const {
  return upper_limit_price_;
}
inline double DATradeStatisticsMessage::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.upper_limit_price)
  return _internal_upper_limit_price();
}
inline void DATradeStatisticsMessage::_internal_set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
}
inline void DATradeStatisticsMessage::set_upper_limit_price(double value) {
  _internal_set_upper_limit_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.upper_limit_price)
}

// double lower_limit_price = 10;
inline void DATradeStatisticsMessage::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double DATradeStatisticsMessage::_internal_lower_limit_price() const {
  return lower_limit_price_;
}
inline double DATradeStatisticsMessage::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DATradeStatisticsMessage.lower_limit_price)
  return _internal_lower_limit_price();
}
inline void DATradeStatisticsMessage::_internal_set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
}
inline void DATradeStatisticsMessage::set_lower_limit_price(double value) {
  _internal_set_lower_limit_price(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DATradeStatisticsMessage.lower_limit_price)
}

// -------------------------------------------------------------------

// DAStatusMessage

// .da.marketdata.v1.DAStatusMessage.StatusType status_type = 1;
inline void DAStatusMessage::clear_status_type() {
  status_type_ = 0;
}
inline ::da::marketdata::v1::DAStatusMessage_StatusType DAStatusMessage::_internal_status_type() const {
  return static_cast< ::da::marketdata::v1::DAStatusMessage_StatusType >(status_type_);
}
inline ::da::marketdata::v1::DAStatusMessage_StatusType DAStatusMessage::status_type() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAStatusMessage.status_type)
  return _internal_status_type();
}
inline void DAStatusMessage::_internal_set_status_type(::da::marketdata::v1::DAStatusMessage_StatusType value) {
  
  status_type_ = value;
}
inline void DAStatusMessage::set_status_type(::da::marketdata::v1::DAStatusMessage_StatusType value) {
  _internal_set_status_type(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAStatusMessage.status_type)
}

// uint64 datetime = 2;
inline void DAStatusMessage::clear_datetime() {
  datetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAStatusMessage::_internal_datetime() const {
  return datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAStatusMessage::datetime() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAStatusMessage.datetime)
  return _internal_datetime();
}
inline void DAStatusMessage::_internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  datetime_ = value;
}
inline void DAStatusMessage::set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAStatusMessage.datetime)
}

// .da.marketdata.v1.DAStatusMessage.TradeStatus status = 3;
inline void DAStatusMessage::clear_status() {
  status_ = 0;
}
inline ::da::marketdata::v1::DAStatusMessage_TradeStatus DAStatusMessage::_internal_status() const {
  return static_cast< ::da::marketdata::v1::DAStatusMessage_TradeStatus >(status_);
}
inline ::da::marketdata::v1::DAStatusMessage_TradeStatus DAStatusMessage::status() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAStatusMessage.status)
  return _internal_status();
}
inline void DAStatusMessage::_internal_set_status(::da::marketdata::v1::DAStatusMessage_TradeStatus value) {
  
  status_ = value;
}
inline void DAStatusMessage::set_status(::da::marketdata::v1::DAStatusMessage_TradeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAStatusMessage.status)
}

// string description = 4;
inline void DAStatusMessage::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& DAStatusMessage::description() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAStatusMessage.description)
  return _internal_description();
}
inline void DAStatusMessage::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAStatusMessage.description)
}
inline std::string* DAStatusMessage::mutable_description() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DAStatusMessage.description)
  return _internal_mutable_description();
}
inline const std::string& DAStatusMessage::_internal_description() const {
  return description_.Get();
}
inline void DAStatusMessage::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DAStatusMessage::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:da.marketdata.v1.DAStatusMessage.description)
}
inline void DAStatusMessage::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:da.marketdata.v1.DAStatusMessage.description)
}
inline void DAStatusMessage::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:da.marketdata.v1.DAStatusMessage.description)
}
inline std::string* DAStatusMessage::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DAStatusMessage::release_description() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DAStatusMessage.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DAStatusMessage::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DAStatusMessage.description)
}

// -------------------------------------------------------------------

// DABBMessage

// .da.marketdata.v1.DATopOfBookAndLastTradeMessage top_message = 1;
inline bool DABBMessage::_internal_has_top_message() const {
  return this != internal_default_instance() && top_message_ != nullptr;
}
inline bool DABBMessage::has_top_message() const {
  return _internal_has_top_message();
}
inline void DABBMessage::clear_top_message() {
  if (GetArena() == nullptr && top_message_ != nullptr) {
    delete top_message_;
  }
  top_message_ = nullptr;
}
inline const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage& DABBMessage::_internal_top_message() const {
  const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* p = top_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage&>(
      ::da::marketdata::v1::_DATopOfBookAndLastTradeMessage_default_instance_);
}
inline const ::da::marketdata::v1::DATopOfBookAndLastTradeMessage& DABBMessage::top_message() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DABBMessage.top_message)
  return _internal_top_message();
}
inline void DABBMessage::unsafe_arena_set_allocated_top_message(
    ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* top_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_message_);
  }
  top_message_ = top_message;
  if (top_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:da.marketdata.v1.DABBMessage.top_message)
}
inline ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* DABBMessage::release_top_message() {
  
  ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* temp = top_message_;
  top_message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* DABBMessage::unsafe_arena_release_top_message() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DABBMessage.top_message)
  
  ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* temp = top_message_;
  top_message_ = nullptr;
  return temp;
}
inline ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* DABBMessage::_internal_mutable_top_message() {
  
  if (top_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::da::marketdata::v1::DATopOfBookAndLastTradeMessage>(GetArena());
    top_message_ = p;
  }
  return top_message_;
}
inline ::da::marketdata::v1::DATopOfBookAndLastTradeMessage* DABBMessage::mutable_top_message() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DABBMessage.top_message)
  return _internal_mutable_top_message();
}
inline void DABBMessage::set_allocated_top_message(::da::marketdata::v1::DATopOfBookAndLastTradeMessage* top_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete top_message_;
  }
  if (top_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_message);
    if (message_arena != submessage_arena) {
      top_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_message, submessage_arena);
    }
    
  } else {
    
  }
  top_message_ = top_message;
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DABBMessage.top_message)
}

// .da.marketdata.v1.DAOrderBookMessage order_book = 2;
inline bool DABBMessage::_internal_has_order_book() const {
  return this != internal_default_instance() && order_book_ != nullptr;
}
inline bool DABBMessage::has_order_book() const {
  return _internal_has_order_book();
}
inline void DABBMessage::clear_order_book() {
  if (GetArena() == nullptr && order_book_ != nullptr) {
    delete order_book_;
  }
  order_book_ = nullptr;
}
inline const ::da::marketdata::v1::DAOrderBookMessage& DABBMessage::_internal_order_book() const {
  const ::da::marketdata::v1::DAOrderBookMessage* p = order_book_;
  return p != nullptr ? *p : reinterpret_cast<const ::da::marketdata::v1::DAOrderBookMessage&>(
      ::da::marketdata::v1::_DAOrderBookMessage_default_instance_);
}
inline const ::da::marketdata::v1::DAOrderBookMessage& DABBMessage::order_book() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DABBMessage.order_book)
  return _internal_order_book();
}
inline void DABBMessage::unsafe_arena_set_allocated_order_book(
    ::da::marketdata::v1::DAOrderBookMessage* order_book) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_book_);
  }
  order_book_ = order_book;
  if (order_book) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:da.marketdata.v1.DABBMessage.order_book)
}
inline ::da::marketdata::v1::DAOrderBookMessage* DABBMessage::release_order_book() {
  
  ::da::marketdata::v1::DAOrderBookMessage* temp = order_book_;
  order_book_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::da::marketdata::v1::DAOrderBookMessage* DABBMessage::unsafe_arena_release_order_book() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DABBMessage.order_book)
  
  ::da::marketdata::v1::DAOrderBookMessage* temp = order_book_;
  order_book_ = nullptr;
  return temp;
}
inline ::da::marketdata::v1::DAOrderBookMessage* DABBMessage::_internal_mutable_order_book() {
  
  if (order_book_ == nullptr) {
    auto* p = CreateMaybeMessage<::da::marketdata::v1::DAOrderBookMessage>(GetArena());
    order_book_ = p;
  }
  return order_book_;
}
inline ::da::marketdata::v1::DAOrderBookMessage* DABBMessage::mutable_order_book() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DABBMessage.order_book)
  return _internal_mutable_order_book();
}
inline void DABBMessage::set_allocated_order_book(::da::marketdata::v1::DAOrderBookMessage* order_book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_book_;
  }
  if (order_book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order_book);
    if (message_arena != submessage_arena) {
      order_book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_book, submessage_arena);
    }
    
  } else {
    
  }
  order_book_ = order_book;
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DABBMessage.order_book)
}

// .da.marketdata.v1.DATradeStatisticsMessage statics = 3;
inline bool DABBMessage::_internal_has_statics() const {
  return this != internal_default_instance() && statics_ != nullptr;
}
inline bool DABBMessage::has_statics() const {
  return _internal_has_statics();
}
inline void DABBMessage::clear_statics() {
  if (GetArena() == nullptr && statics_ != nullptr) {
    delete statics_;
  }
  statics_ = nullptr;
}
inline const ::da::marketdata::v1::DATradeStatisticsMessage& DABBMessage::_internal_statics() const {
  const ::da::marketdata::v1::DATradeStatisticsMessage* p = statics_;
  return p != nullptr ? *p : reinterpret_cast<const ::da::marketdata::v1::DATradeStatisticsMessage&>(
      ::da::marketdata::v1::_DATradeStatisticsMessage_default_instance_);
}
inline const ::da::marketdata::v1::DATradeStatisticsMessage& DABBMessage::statics() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DABBMessage.statics)
  return _internal_statics();
}
inline void DABBMessage::unsafe_arena_set_allocated_statics(
    ::da::marketdata::v1::DATradeStatisticsMessage* statics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statics_);
  }
  statics_ = statics;
  if (statics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:da.marketdata.v1.DABBMessage.statics)
}
inline ::da::marketdata::v1::DATradeStatisticsMessage* DABBMessage::release_statics() {
  
  ::da::marketdata::v1::DATradeStatisticsMessage* temp = statics_;
  statics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::da::marketdata::v1::DATradeStatisticsMessage* DABBMessage::unsafe_arena_release_statics() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DABBMessage.statics)
  
  ::da::marketdata::v1::DATradeStatisticsMessage* temp = statics_;
  statics_ = nullptr;
  return temp;
}
inline ::da::marketdata::v1::DATradeStatisticsMessage* DABBMessage::_internal_mutable_statics() {
  
  if (statics_ == nullptr) {
    auto* p = CreateMaybeMessage<::da::marketdata::v1::DATradeStatisticsMessage>(GetArena());
    statics_ = p;
  }
  return statics_;
}
inline ::da::marketdata::v1::DATradeStatisticsMessage* DABBMessage::mutable_statics() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DABBMessage.statics)
  return _internal_mutable_statics();
}
inline void DABBMessage::set_allocated_statics(::da::marketdata::v1::DATradeStatisticsMessage* statics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete statics_;
  }
  if (statics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(statics);
    if (message_arena != submessage_arena) {
      statics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statics, submessage_arena);
    }
    
  } else {
    
  }
  statics_ = statics;
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DABBMessage.statics)
}

// .da.marketdata.v1.DAStatusMessage status = 4;
inline bool DABBMessage::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DABBMessage::has_status() const {
  return _internal_has_status();
}
inline void DABBMessage::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::da::marketdata::v1::DAStatusMessage& DABBMessage::_internal_status() const {
  const ::da::marketdata::v1::DAStatusMessage* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::da::marketdata::v1::DAStatusMessage&>(
      ::da::marketdata::v1::_DAStatusMessage_default_instance_);
}
inline const ::da::marketdata::v1::DAStatusMessage& DABBMessage::status() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DABBMessage.status)
  return _internal_status();
}
inline void DABBMessage::unsafe_arena_set_allocated_status(
    ::da::marketdata::v1::DAStatusMessage* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:da.marketdata.v1.DABBMessage.status)
}
inline ::da::marketdata::v1::DAStatusMessage* DABBMessage::release_status() {
  
  ::da::marketdata::v1::DAStatusMessage* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::da::marketdata::v1::DAStatusMessage* DABBMessage::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:da.marketdata.v1.DABBMessage.status)
  
  ::da::marketdata::v1::DAStatusMessage* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::da::marketdata::v1::DAStatusMessage* DABBMessage::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::da::marketdata::v1::DAStatusMessage>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::da::marketdata::v1::DAStatusMessage* DABBMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable:da.marketdata.v1.DABBMessage.status)
  return _internal_mutable_status();
}
inline void DABBMessage::set_allocated_status(::da::marketdata::v1::DAStatusMessage* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:da.marketdata.v1.DABBMessage.status)
}

// -------------------------------------------------------------------

// DAHeartbeatMessage

// uint64 datetime = 1;
inline void DAHeartbeatMessage::clear_datetime() {
  datetime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAHeartbeatMessage::_internal_datetime() const {
  return datetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DAHeartbeatMessage::datetime() const {
  // @@protoc_insertion_point(field_get:da.marketdata.v1.DAHeartbeatMessage.datetime)
  return _internal_datetime();
}
inline void DAHeartbeatMessage::_internal_set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  datetime_ = value;
}
inline void DAHeartbeatMessage::set_datetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:da.marketdata.v1.DAHeartbeatMessage.datetime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace marketdata
}  // namespace da

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::da::marketdata::v1::DAOrderBookMessage_BookType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::da::marketdata::v1::DAOrderBookMessage_BookType>() {
  return ::da::marketdata::v1::DAOrderBookMessage_BookType_descriptor();
}
template <> struct is_proto_enum< ::da::marketdata::v1::DAStatusMessage_StatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::da::marketdata::v1::DAStatusMessage_StatusType>() {
  return ::da::marketdata::v1::DAStatusMessage_StatusType_descriptor();
}
template <> struct is_proto_enum< ::da::marketdata::v1::DAStatusMessage_TradeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::da::marketdata::v1::DAStatusMessage_TradeStatus>() {
  return ::da::marketdata::v1::DAStatusMessage_TradeStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_da_5fmarketdata_2eproto
